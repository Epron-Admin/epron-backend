{"version":3,"file":"uploads.js","names":["errorOccured","upload","multer","dest","cvsConvertData","user_id","general","router","express","Router","post","single","req","res","console","log","file","status","send","fileRows","csv","parseFile","path","on","data","push","fs","unlinkSync","pin","Math","random","toString","slice","Log","insertMany","then","fileRow","success","error","message","json","csvtojson","csvData","moveDate","army","i","length","ton_weight","obj","category_id","sub_category_id","unit","quantity","Number","weight","price","total","equipment_pin","payable","reduce","previousValue","currentValue","body","fromFile","jsonObj","Types","find","exec","err","type","filter","element","forEach","object","type_code","_id","create","category_name","sub_category_name"],"sources":["../src/uploads.js"],"sourcesContent":["// const IncomingForm = require ('/formidable');\n\n// import formidable from 'formidable';\nimport path from 'path';\nimport express from 'express';\nimport Log from './models/Log.model.js';\nimport Epuip from './models/Epuip.model.js';\n// import {Cloudinary} from './cloudinaryConfig';\nimport fs from 'fs';\nlet errorOccured = false;\n\nimport multer from 'multer';  \nimport csv from 'fast-csv';\nimport csvtojson from 'csvtojson';\n// const upload = multer({ dest: 'uploads/' });\nconst upload = multer({ dest: 'tmp/csv/' });\n\n// const formidable = require ('formidable');\n// const path = require ('path');\n// const express = require ('express');\nimport Types from './models/CategoryTypes.model.js';\nimport Categories from './models/Category.model.js';\n\nlet cvsConvertData;\nlet user_id;\n// let sub_cat;\nlet general = [];\n\n\n\n\nconst router = express.Router();\n// const fileName;\n\n\nrouter.post('/upload-csv1', upload.single('file'), function (req, res) {\n    console.log(\"Requestttttttttttt\", req.file)\n    if (!req.file)\n        return res.status(400).send('No files were uploaded.');\n    const fileRows = [];\n  \n    // open uploaded file\n    csv.parseFile(req.file.path)\n      .on(\"data\", function (data) {\n        fileRows.push(data); // push each row\n      })\n      .on(\"end\", function () {\n        console.log(fileRows)\n        fs.unlinkSync(req.file.path);   // remove temp file\n        //process \"fileRows\" and respond\n\n        const pin = Math.random().toString(36).slice(2);\n        fileRows.push(pin);\n\n        Log.insertMany(fileRows).then(() => {\n            console.log(\"Data saved\");\n            return res.status(201).send({data: fileRow, success: 'Data saved.'});\n        }).catch((error) => {\n            res.status(500).send({\n                message: \"failure\",\n                error\n            });\n        });\n        res.json(fileRows);\n    })\n});\n\n\nrouter.post('/upload-csv2', upload.single('file'), function (req, res) {\n    if (!req.file)\n        return res.status(400).send('No files were uploaded.');\n    console.log(\"Requestttttttttttt\", req.file)\n     csvtojson\n     .parseFile(req.file.path).then(csvData => {\n        console.log(\"csv datatttttttt\", csvData)\n        Log.insertMany(csvData).then(() => {\n            console.log(\"Data saved\");\n            return res.status(200).send({success: 'Data saved.'});\n        }).catch((error) => {\n            res.status(500).send({\n                message: \"failure\",\n                error\n            });\n        });\n     })\n});\n\n\nexport const moveDate = async (req, res) => {\n    console.log(\" Csv data\", cvsConvertData);\n\n    const pin = Math.random().toString(36).slice(2);\n    var army = [];\n    for(var i = 0; i < cvsConvertData.length; i++ ) {\n        let ton_weight;\n        if (cvsConvertData[i]['unit'] === 'kg') {\n            ton_weight = 0.00110231 * cvsConvertData[i]['weight'];\n        }\n        if (cvsConvertData[i]['unit'] === 'g') {\n            ton_weight = 0.0000011023 * cvsConvertData[i]['weight'];\n        }\n        \n        // const total_weight = ton_weight;\n        var obj = {};\n        obj.category_id = cvsConvertData[i]['category_id'],\n        obj.sub_category_id = cvsConvertData[i]['sub_category_id'],\n        obj.unit = cvsConvertData[i]['unit'],\n        obj.quantity = Number(cvsConvertData[i]['quantity']),\n        obj.weight = Number(cvsConvertData[i]['weight']),\n        // obj.unit_price = jsonObj[i]['unit_price'],\n        obj.price = Number(cvsConvertData[i]['price']),\n        obj.total = Number(obj.price * ton_weight),\n        obj.equipment_pin = pin,\n        obj.user_id = user_id,\n        await army.push(obj);\n        // general.push(obj);\n    }\n    // console.log(\"GENERAL ASEMBLY\", general);\n    let payable = army.reduce(function (previousValue, currentValue) {\n        return previousValue + currentValue.total;\n    }, 0);\n    console.log(\"payable\", payable);\n    // var newArray = general.filter((el) => {\n    //     return el.category_id != undefined &&\n    //         el.sub_category_id != undefined \n    //         // el.unit &&\n    //         // el.quantity &&\n    //         // el.weight &&\n    //         // el.price &&\n    //         // el.total &&\n    //         // el.equipment_pin &&\n    //         // el.user_id;\n    //     }\n    // );\n        console.log(\"saved jason\", army)\n        Log.insertMany(army).then(() => {\n        console.log(\"saved datatatatatatattttttt\", army)\n        res.status(200).send({\n            message: \"Successfully Uploaded bulk equipment!\",\n            payable: payable\n        });\n    })\n\n    // const payable = army;\n    // res.status(200).send({\n    //     message: \"Successfully Uploaded!\",\n    // });\n    // let payable = army.reduce(function (previousValue, currentValue) {\n    //     return previousValue + currentValue.total;\n    //   }, 0);\n    //   console.log(\"payable\", payable);\n    //   Log.insertMany(army).then(() => {\n    //     res.status(200).send({\n    //         message: \"Successfully Uploaded!\",\n    //         payable: payable\n    //     });\n    // }).catch((error) => {\n    //     res.status(500).send({\n    //         message: \"failure\",\n    //         error\n    //     });\n    // });\n}\n\nrouter.post('/upload-csv-bulk', upload.single('file'), async (req, res) => {\n    console.log(\"reqest jsonnnnnn\", req.file)\n\n    if (!req.file) {\n        return res.status(400).send('No files were uploaded.');\n    }\n    user_id = req.body.user_id;\n    await csvtojson().fromFile(req.file.path).then(async (jsonObj) => {\n        fs.unlinkSync(req.file.path);  // remove temp file\n        console.log(\"reqest jsonnnnnn\", jsonObj)\n        cvsConvertData = jsonObj;\n        let typeData;\n        for(var i = 0; i < jsonObj.length; i++ ) {\n            let ton_weight;\n            if (cvsConvertData[i]['unit'] === 'kg') {\n                ton_weight = 0.00110231 * cvsConvertData[i]['weight'];\n            }\n            if (cvsConvertData[i]['unit'] === 'g') {\n                ton_weight = 0.0000011023 * cvsConvertData[i]['weight'];\n            }\n            Types.find({ }).exec( async (err, type) => {\n                if (err) {\n                    console.log(err);\n                    return res.json({ error: true, status: 401, message: \"Error occured in getting sub category\" });\n                }\n                if (!type) {\n                    return res.json({ error: true, status: 404, message: \"Can not find sub category\" });\n                }\n                else {\n                    \n                    console.log(\"Typessssssssssssssss\", type)\n                    console.log(\"Index data\", jsonObj);\n                    type.filter((element) => {\n                        // console.log(\"element\", element)\n                        cvsConvertData.forEach(object => {\n                            \n                            \n                            // console.log(\"Objecttttttttttt\", object);\n                            if (element.type_code === object.type_code) {\n                                object.sub_category_id = element._id;\n                                object.category_id = element.category_id;\n                                object.price = element.price;\n                                // object.unit = element.unit;\n                                // object.weight = element.ton_weight;\n                                object.user_id = req.body.user_id;\n                                object.total = Number(element.price * ton_weight);\n                            }\n                            // console.log(\"elementary object\", element)\n                            // moveDate(req, res)\n                            \n                        });\n\n                        console.log(\"Adjusted array\", cvsConvertData);\n                        let payable = cvsConvertData.reduce(function (previousValue, currentValue) {\n                            return previousValue + currentValue.total;\n                        }, 0);\n                        console.log(\"payable\", payable, cvsConvertData);\n                        Log.create(cvsConvertData[0]).then(() => {\n                            console.log(\"saved datatatatatatattttttt\", cvsConvertData)\n                            // return res.json({error: false, status: 200,  payable: payable, message: \"Successfully Uploaded bulk equipment!\" });\n\n                            // res.status(200).send({\n                            //     message: \"Successfully Uploaded bulk equipment!\",\n                            //     payable: payable\n                            // });\n                        })\n                        \n                        \n                    });\n                    //  moveDate(req, res);\n                    // console.log(\"GENERAL ASEMBLY\", general);\n                }\n                \n                // moveDate(req, res);\n\n            });\n\n            // let payable = general;\n            // res.status(200).send({\n            //     message: \"Successfully Uploaded!\",\n            // });\n\n        }\n        // console.log(\"New category array\", army2);\n        // console.log(\"armyyyyyyy\", army);\n        // res.status(200).send({\n        //     message: \"Got category succefully!\",\n        // });\n        \n    \n    }).catch((error) => {\n        res.status(500).send({\n            message: \"failure\",\n            error: error\n        });\n    });\n    res.status(200).send({\n        message: \"Successfully Uploaded bulk equipment!\",\n        // payable: payable\n    });\n});\n\n\nrouter.post('/upload-csv', upload.single('file'), async function (req, res) {\n    if (!req.file)\n        return res.status(400).send('No files were uploaded.');\n    // console.log(\"Requestttttttttttt\", req.file)\n    await csvtojson().fromFile(req.file.path).then((jsonObj)=>{\n        fs.unlinkSync(req.file.path);   // remove temp file\n        // console.log(\"jsonnnnnnnnnnnnnnnnn\", jsonObj);\n        const pin = Math.random().toString(36).slice(2);\n        var army = [];\n        for(var i = 0;i<jsonObj.length;i++){\n            var obj={};\n            // obj.category_id = jsonObj[i]['category_id'],\n            obj.category_id = jsonObj[i]['category_id'],\n            obj.category_name = jsonObj[i]['category_name'],\n            obj.sub_category_id = jsonObj[i]['sub_category_id'],\n            obj.sub_category_name = jsonObj[i]['sub_category_name'],\n            obj.quantity= jsonObj[i]['quantity'],\n            obj.weight = jsonObj[i]['weight'],\n            // obj.unit_price = jsonObj[i]['unit_price'],\n            obj.price = jsonObj[i]['price'],\n            obj.total = obj.price * obj.weight,\n            obj.equipment_pin = pin,\n            obj.user_id = jsonObj[i]['user_id'],\n            army.push(obj);\n        }\n        // console.log(\"armyyyyyyy\", army);\n        // const payable = army.\n        let payable = army.reduce(function (previousValue, currentValue) {\n            return previousValue + currentValue.total;\n          }, 0);\n          console.log(\"payable\", payable);\n          Log.insertMany(army).then(() => {\n            res.status(200).send({\n                message: \"Successfully Uploaded!\",\n                payable: payable\n            });\n        }).catch((error) => {\n            res.status(500).send({\n                message: \"failure\",\n                error\n            });\n        });\n    }).catch((error) => {\n        res.status(500).send({\n            message: \"failure\",\n            error: error\n        });\n    });\n});\n\n// module.exports = router;\nexport default router"],"mappings":"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"}