{"version":3,"file":"users.controllers.js","names":["upload","multer","dest","paystack","Paystack","API_KEY","DOMAIN","router","express","Router","get_customers","req","res","customer","list","error","body","json","status","customers","message","initialize_transanction","transaction","initialize","email","amount","Number","then","data","update_payment_option","Log","find","equipment_pin","params","pin","exec","err","log","paid","reference","ref","save","result","update_multiple_payment_options","updateMany","console","acknowledged","user_profile","User","findById","id","user","send","get_countries","countries","Country","getAllCountries","code","get_states","isoCode","states","State","getStatesOfCountry","get_cities","id2","cities","City","getCitiesOfState","get_naija_states","NaijaStates","get_naija_lgas","lgas","state","get_naija","all","update_profile","next","Error","name","phoneNumber","address","find_user_by_role","page","parseInt","query","limit","startIndex","endIndex","results","countDocuments","role","total","previous","sort","skip","pagination","find_user_byid","_id","find_collection_center_by_location","lga","forgot_password","async","waterfall","done","crypto","randomBytes","buf","token","toString","findOne","userEmail","resetPasswordToken","resetPasswordExpires","Date","now","mailTransporter","nodemailer","createTransport","service","auth","pass","mailDetails","from","to","subject","text","sendMail","password_reset","$gt","password","confirmPassword","newPassword","bcrypt","hashSync","findByIdAndUpdate","undefined","change_password","oldPassword","compare","log_equiptment","category_id","sub_category_id","quantity","weight","unit","user_id","ton_weight","Types","type","price","Math","random","slice","round","unit_weight","created_at","updated_at","update_logged_equipment","fetch_user_loged_equiptment_byid","total_equipment_logged","total_number_paid","populate","equipment","log_weight","reduce","previousValue","currentValue","value","filter","total_payment_made","value2","total_unpaid","number_of_unpaid","total_logged_equipment_paid","unpaid_log_number","unpaid_payment","total_logged_eqiupment","total_weight_logged","fetch_user_loged_equiptment_byid_paid_status","fetch_user_loged_equiptment_by_payment","fetch_all_loged_equiptments","total_log","remove_log_equipment","findByIdAndRemove","bulk_log_upload","single","csv","fromFile","file","path","jsonObj","army","i","length","obj","firstName","lastName","house","category_name","sub_category_name","push","insertMany","bulk_log_upload2","files","authorFile","authors","csvtojson","noheader","output","fromString","csvRow","bulk_log_upload3","headers","ignoreEmpty","on","mongoose","ObjectId","Authors","create","documents","log_equiptment2","excel_bulk_equipment","get_price_of_equipment_for_payment","total_payment"],"sources":["../../../src/controllers/users/users.controllers.js"],"sourcesContent":["\nimport User from '../../models/User.model.js'\nimport Log from '../../models/Log.model.js';\nimport Types from '../../models/CategoryTypes.model.js';\nimport querystring from 'querystring';\n// import GenCtrl from  '@balocodes/express';\n// import MailController from '@balocodes/express';\nimport jwt from 'jsonwebtoken';\nimport nodemailer from 'nodemailer';\nimport crypto from 'crypto';\nimport async from 'async';\nimport bcrypt from 'bcrypt';\nimport csvtojson from 'csvtojson';\nimport csv from 'csvtojson';\n// import csv from 'fast-csv';\nimport multer from 'multer';  \nconst upload = multer({ dest: 'uploads/' });\nimport CsvIt from \"csv-it\";\n\n// const paystack = require(\"paystack\")(\"sk_test_72c8ff80984a6f3e15c931b9485f55474ea36e81\");\nimport Paystack from 'paystack';\nimport { Country, State, City }  from 'country-state-city';\n\n// import Paystack from 'paystack';\n// const paystack = Paystack('sk_test_72c8ff80984a6f3e15c931b9485f55474ea36e81');\n\n// const express = require('express');\nimport NaijaStates from 'naija-state-local-government';\nimport express from 'express';\n\nconst paystack = new Paystack('sk_test_72c8ff80984a6f3e15c931b9485f55474ea36e81');\n\n\n\n\nvar API_KEY = 'a2e391c08729f67397de943776f87024-46ac6b00-d975f38b';\nvar DOMAIN = 'sandbox086e0a8d8f2f4b748fb92de88df70842.mailgun.org';\n\nimport Mailgun from 'mailgun-js';\nimport console from 'console';\nimport { type } from 'os';\n\n// const mailgun = new Mailgun({apiKey: API_KEY, domain: DOMAIN});\n\n// const app = express();\n// app.use(upload.array());\n\nconst router = express.Router();\n\n\n\nexport const get_customers = (req, res) => {\n    paystack.customer.list(function(error, body) {\n        if (!error) {\n        return res.json({error: false, status: 201, customers: body, message: \"success!\" });\n\n        } if (error) {\n            // console.log(error);\n            return res.json({error: true, status: 401, message: error});\n        }\n    });\n}; \n  \nexport const initialize_transanction = (req, res) => {\n    paystack.transaction.initialize({\n        email: req.body.email,\n        amount: Number(req.body.amount) * 100\n    }).then((body) => {\n        return res.json({error: false, status: 201, customers: body.data, message: \"success!\" });\n        // res.send(body.data)\n        // console.log(body);\n    }).catch((error) => {\n        return res.json({error: true, status: 401, message: error});\n        // console.log(err);\n    })\n}\n\nexport const update_payment_option = (req, res) => {\n    Log.find({equipment_pin: req.params.pin}).exec((err, log) => {\n        if (err) {\n            return res.json({error: true, status: 401, message: \"An error occured\" });\n        }\n        if (!log) {\n            return res.json({error: true, status: 404, message: \"can not find logged equipment with that equipment pin\" });\n        }\n        else {\n            log[0].paid = true;\n            log[0].reference = req.params.ref;\n            log[0].save().then(result => {\n                return res.json({error: false, status: 201, message: \"Payment updated successfully!\" });\n            }).catch(err => {\n                return res.json({error: true, status: 401, message: \"Could not update logged payment status\" });\n            });\n        }\n    });\n}\n\n\n// When payment has to be updated on more than one record.\nexport const update_multiple_payment_options = async (req, res) => {\n    Log.updateMany({equipment_pin: req.params.pin}, {paid: true}).exec((err, log) => {\n        console.log(\"many recoreds\", log)\n        if (err) {\n            return res.json({error: true, status: 401, message: \"An error occured\" });\n        }\n        if (!log) {\n            return res.json({error: true, status: 404, message: \"can not find logged equipment with that equipment pin\" });\n        }\n        if (log.acknowledged != true) {\n            return res.json({error: true, status: 401, message: \"could not update multiple records to paid\" });\n        }\n        if (log.acknowledged === true) {\n            return res.json({error: false, status: 201, message: \"Multiple records updated to paid\" });\n        }\n    });\n}\n\n\nexport const user_profile = (req, res) => {\n    User.findById(req.params.id).exec((err, user) => {\n        if (err) {\n            console.log(err);\n            return res.send(err);\n        }\n        // res.send(user);\n        res.status(200).json({user});\n        // console.log(user);\n        // console.log('Done');\n    });\n}\n\n// console.log(Country.getAllCountries());\n// console.log(State.getStatesOfCountry('NG'))\n\nexport const get_countries = (req, res) => {\n    \n    const countries = Country.getAllCountries();\n    return res.json({error: false, message: 'countries loaded', data: countries,  status: 'success', code: 201});\n}\n\nexport const get_states = (req, res) => {\n    const id  = req.params.isoCode;\n    const states = State.getStatesOfCountry(id);\n    return res.json({error: false, message: 'states loaded', data: states,  status: 'success', code: 201});\n}\n\nexport const get_cities = (req, res) => {\n    const id  = req.params.isoCode;\n    const id2 = req.params.id;\n    const cities = City.getCitiesOfState(id, id2);\n    return res.json({error: false, message: 'cities loaded', data: cities,  status: 'success', code: 201});\n}\n\nexport const get_naija_states = (req, res) => {\n    const states = NaijaStates.states();\n    return res.json({error: false, message: 'states loaded', data: states,  status: 'success', code: 201});\n}\n\nexport const get_naija_lgas = (req, res) => {\n    const states = NaijaStates.lgas(req.params.state);\n    return res.json({error: false, message: 'states loaded', data: states,  status: 'success', code: 201});\n}\n\nexport const get_naija = (req, res) => {\n    const states = NaijaStates.all();\n    return res.json({error: false, message: 'states loaded', data: states,  status: 'success', code: 201});\n}\n\n\nexport const update_profile = (req, res) => {\n    User.findById(req.params.id, (err, user) => {\n        if (err) {\n            console.log(err);\n        }\n        if (!user)\n            return next(new Error('Could not load document'));\n        else {\n            // console.log('The user', user);\n            // console.log('the body', req.body);\n            user.name = req.body.name;\n            // user.email = req.body.email;\n            user.phoneNumber = req.body.phoneNumber;\n            user.address = req.body.address;\n            user.state = req.body.state;\n            // user.city = req.body.city;\n            // user.lga = req.body.lga;\n           \n            // user.body.user = req.body;\n            user.save().then(result => {\n                res.json({ 'user  ': result });\n                //res.status(200).send({mssage: 'update successful'});\n            }).catch(err => {\n                console.log(err.code);\n                res.send({ error: true, message: 'failed to update' });\n            });\n        }\n    });\n}\n\nexport const find_user_by_role = async (req, res) => {\n    const page = parseInt(req.query.page);\n    const limit = parseInt(req.query.limit);\n    const startIndex = (page - 1) * limit;\n    const endIndex = page * limit;\n    const results = {};\n\n    const total = await User.countDocuments({role: req.params.role}).exec();\n\n    if (endIndex <  await User.countDocuments().exec()) {\n        results.next = {\n            page: page + 1,\n            limit: limit\n        }\n    }\n\n    if (startIndex > 0) {\n        results.previous = {\n            page: page - 1,\n            limit: limit\n        }\n    }\n    User.find({role: req.params.role}).sort('-created_at').limit(limit).skip(startIndex).exec((err, user) => {\n        if (err) {\n            console.log(err);\n            return res.json({error: true, status: 401, message: \"Error occured\"})\n        }\n        if (!user) {\n            console.log(err);\n            return res.json({error: true, status: 404, message: \"User not found\"})\n        }\n        \n        return res.json({error: false, status: 201, total: total, pagination: results, user: user, message: \"successful!\" });\n    });\n}\n\nexport const find_user_byid = async (req, res) => {\n    \n    User.find({ _id: req.params.id }).exec((err, user) => {\n        if (err) {\n            console.log(err);\n            return res.json({error: true, status: 401, message: \"Error occured\"})\n        }\n        if (!user) {\n            console.log(err);\n            return res.json({error: true, status: 404, message: \"User not found\"})\n        }\n        \n        return res.json({error: false, status: 201, user: user, message: \"successful!\" });\n    });\n}\n\n\nexport const find_collection_center_by_location = async (req, res) => {\n    \n    User.find({ lga: req.params.lga, role: 'collector' }).exec((err, user) => {\n        if (err) {\n            console.log(err);\n            return res.json({error: true, status: 401, message: \"Error occured\"})\n        }\n        if (!user) {\n            console.log(err);\n            return res.json({error: true, status: 404, message: \"User not found\"})\n        }\n        \n        return res.json({error: false, status: 201, user: user, message: \"successful!\" });\n    });\n}\n\n\n\n\n\n// fortgot password to be sent to your email\nexport const forgot_password = (req, res, next) => {\n    // console.log('Email from front', req.body);\n    async.waterfall([\n        (done) => {\n            crypto.randomBytes(20, (err, buf) => {\n                let token = buf.toString('hex');\n                done(err, token);\n            });\n        },\n        (token, done) => {\n            User.findOne({ email: req.body.email }, (err, user) => {\n               let userEmail = req.body.email;\n                // console.log('email', userEmail);\n                if (!user) {\n                    // req.flash('error', 'No account with that email address exists.');\n                    // return next(new Error('No account with that email address exists.'));\n                    return res.send({error: true, message: 'Email address does not exists.'});\n\n                }\n                user.resetPasswordToken = token;\n                user.resetPasswordExpires = Date.now() + 3600000;\n\n                user.save(function (err) {\n                    done(err, token, user);\n                });\n            });\n        },\n        (token, user, done) => {\n            let mailTransporter = nodemailer.createTransport({\n                service: 'gmail',\n                auth: {\n                    user: 'epronnigeria@gmail.com',\n                    pass: 'xwytgfmmdpdnbajp'\n                }\n            });\n\n            let mailDetails = {\n                from: 'Epron Admin <epronnigeria@gmail.com>',\n                to: req.body.email,\n                subject: 'Reset your password',\n                text: 'You are receiving this because you (or someone else) have requested the reset of the password ' + ' please click on the following link, or paste this into your browser to complete the process:\\n\\n' + 'https://blackbox.epron.org.ng/users/reset-reset/' + token + '\\n\\n' +\n                'If you did not request this, please ignore this email and your password will remain unchanged'\n            };\n            mailTransporter.sendMail(mailDetails, function(err, data) {\n                // console.log(\"Dattttttttttttaaaaaaaa\", data);\n                if(err) {\n                    // console.log('Error Occurs', err);\n                    return res.send({error: true, code: 401, message: \"Failed to reset user password\"});\n                } else {\n                    // console.log('Email sent successfully');\n                    return res.json({error: false, code: 201, status: 'success', message: 'Token sent to your email'});\n                }\n            });\n\n\n            \n\n\n            // const data = {\n            // from: 'Epron Admin <epron@gmail.com>',\n            // to: req.body.email,\n            // subject: 'Password reset',\n            // text: 'You are receiving this because you (or someone else) have requested the reset of the password ' + ' please click on the following link, or paste this into your browser to complete the process:\\n\\n' + 'https://blackbox.epron.org.ng/users/password-reset/' + token + '\\n\\n' +\n            //             'If you did not request this, please ignore this email and your password will remain unchanged'\n            // };\n\n            // mailgun.messages().send(data, (error, body) => {\n            // if (error) {\n            //     console.log(error);\n            //     res.send({error});\n            // }\n            // console.log('Mailgun body', body);\n            // res.json({error: false, message: 'Token sent to your email', status: 'success', code: 201});\n            // });\n        }\n    ]).catch(err => {\n         console.log(err);\n         res.send({err});\n     })\n    \n}\n\n\n\n// function to change the forgotten password\nexport const password_reset = (req, res, next) => {\n    console.log('password from front: ', req.params.token);\n async.waterfall([\n         (done) => {\n            User.findOne({ resetPasswordToken: req.params.token, resetPasswordExpires: { $gt: Date.now() } }, (err, user) => {\n                if (!user) {\n                    // console.log('password from front: ', req.body);\n                    // return next(new Error('Password reset token is invalid or has expired.'));\n                    return res.send({message: 'Password reset token has expired, or user not found.'});\n                    // req.flash('success', 'Password reset token is invalid or has expired.');\n                    // return res.redirct('back');\n                }\n                if (req.body.password === req.body.confirmPassword) {\n                    const newPassword = bcrypt.hashSync(req.body.password, 10);\n                        User.findByIdAndUpdate(user._id, { password: newPassword, resetPasswordToken: undefined, resetPasswordExpires: undefined }, (error, data) => {\n                            // res.json({ 'user': data });\n\n                            let mailTransporter = nodemailer.createTransport({\n                                service: 'gmail',\n                                auth: {\n                                    user: 'charlesamos003@gmail.com',\n                                    pass: 'xwytgfmmdpdnbajp'\n                                }\n                            });\n                            let mailDetails = {\n                                from: 'Epron Admin <empron@gmail.com>',\n                                to: req.body.email,\n                                subject: 'Password has been changed',\n                                text: 'Hello,\\n\\n' + ' This is a confirmation that the password for your accout ' + user.email + ' has just been changed'\n                            };\n\n                            mailTransporter.sendMail(mailDetails, function(err, data) {\n                                // console.log(\"Dattttttttttttaaaaaaaa\", data);\n                                if(err) {\n                                    // console.log('Error Occurs', err);\n                                    return res.send({error: true, code: 401, message: \"Failed to reset user password\"});\n                                } else {\n                                    // console.log('Email sent successfully');\n                                    return res.json({error: false, code: 201, status: 'success', message: 'Password reset successful'});\n                                }\n                            });\n\n\n\n                            // const data2 = {\n                            //   from: 'Epron Admin <epron@gmail.com>',\n                            //   to: user.email,\n                            //   subject: 'Your password has been changed',\n                            //   text: 'Hello,\\n\\n' + ' This is a confirmation that the password for your accout ' + user.email + ' has just been changed'\n                            // };\n                            // mailgun.messages().send(data2, (error, body) => {\n                            // if (error) {\n                            //     console.log(error);\n                            // return res.json({errr: true, error, message: 'An error occured while sending you a mail'});\n                            // }\n                            // // console.log('Mailgun body', body);\n                            // // res.json({body, 'user': data});\n                            // res.json({error: false, message: 'Password reset successful'});\n                            // });\n                            // // done(user);\n                    });\n                } else {\n                    // req.flash('error', 'Passwords do not match.');\n                    res.send({error: true, message: \"Can't reset password.\"});\n                    // return res.redirect('back');\n                }\n            });\n        }\n        \n     ]).catch(err => {\n         console.log(err);\n         res.send({err});\n     })\n\n}\n\n\nexport const change_password = (req, res) => {\n    console.log('Clicked', req.body.oldPassword);\n    let oldPassword = req.body.oldPassword;\n    let newPassword = bcrypt.hashSync(req.body.newPassword, 10);\n    let email = req.body.email;\n    // console.log(\"email\" ,email);\n    // console.log('new passowrd', newPassword);\n    User.find({ email: email }, (err, user) => {\n        // console.log('user password', user[0].password, newPassword);\n        if (!user) {\n            return res.send({ code: 404, error: true, message: \"Can't find user\" });\n        } else if (user) {\n            // console.log('the user ring', user);\n            if (bcrypt.compare(oldPassword, user[0].password)) {\n                // console.log('Za user', user[0].password);\n                User.findByIdAndUpdate(user[0]._id.toString(), { password: newPassword }, (err, data) => {\n                    // console.log(\"adatatatata\", data);\n                    if (err) {\n                        // console.log('failed');\n                        // console.log('the user error change', user);\n                         res.send({ error: true, message: 'Failed to change password' });\n                    } else {\n                        // console.log('the user successful change password', user);\n                        // console.log('success');\n                        return res.send({ error: false, message: 'Password successfully changed' });\n\n                    }\n                });\n            }\n        } else {\n            return res.send({ error: true, message: 'User not found' });\n        }\n    });\n}\n\n// export const log_equiptment = async (req, res) => {\n//     if (\n//         (!req.body.category_id) ||\n//         (!req.body.price) ||\n//         (!req.body.sub_category_id) ||\n//         (!req.body.quantity) ||\n//         (!req.body.weight) ||\n//         (!req.body.unit) ||\n//         (!req.body.user_id)\n//         ) {\n//         return res.status(401).send({error: true, message: \"Category_id, price, unit, type, quantity, weight and user_id are required\"});\n//     }   \n//     else {\n//         let ton_weight;\n//         await Types.findById({ _id: req.body.sub_category_id }).exec((err, type) => {\n//             if (err) {\n//                 console.log(err);\n//                 return res.json({error: true, status: 401, message: \"Failed fetch types\"})\n//             }\n//             if (req.body.price != type.price) {\n//                 return res.json({error: true, status: 401, message: \"The type price does not match\" });\n//             }\n//             // note the weight is measured in tonage or ton, after the aggregation from the unit.\n//             if (req.body.unit === 'kg') {\n//                 ton_weight = 0.00110231 * req.body.weight;\n//             }\n//             if (req.body.unit === 'g') {\n//             ton_weight = 0.0000011023 * req.body.weight;\n//             }\n//             // res.json({error: false, status: 201, requests: type, message: \"fetch all types successful!\" });\n//             const total = type.price *  req.body.quantity * req.body.weight;\n//             const pin = Math.random().toString(36).slice(2);\n//             let log = new Log({\n//                 category_id: req.body.category_id,\n//                     price: type.price,\n//                     total: Math.round(total),\n//                     sub_category_id: req.body.sub_category_id,\n//                     quantity: req.body.quantity,\n//                     weight: ton_weight,\n//                     unit: req.body.unit,\n//                     unit_weight: req.body.weight,\n//                     user_id: req.body.user_id,\n//                     equipment_pin: pin,\n//                     created_at: Date.now(),\n//                     updated_at: Date.now()\n//             });\n//             log.save()\n//             .then(data => {\n//                 res.status(201).json({log: data, error: false, message: \"Equipment saved successful!\" });\n//             })\n//             .catch(err => {\n//                 console.log(err);\n//                 res.status(401).send({error: true, message: \"Failed to save equipment\"});\n//             });\n//         });\n    \n//     }\n// }\n\nexport const log_equiptment = async (req, res) => {\n    if (\n        (!req.body.category_id) ||\n        // (!req.body.price) ||\n        (!req.body.sub_category_id) ||\n        (!req.body.quantity) ||\n        (!req.body.weight) ||\n        (!req.body.unit) ||\n        (!req.body.user_id)\n        ) {\n        return res.status(401).send({error: true, message: \"Category_id, unit, type, quantity, weight and user_id are required\"});\n    } \n\n    User.findById({_id: req.body.user_id}).exec((err, user) => {\n        if (err) {\n            // console.log(err);\n            return res.send(err);\n        }\n        if (!user) {\n            return res.status(404).send({error: true, message: \"User not found\"});;\n        }\n\n        if (user.role != 'manufacturer') {\n            return res.status(401).send({error: true, message: \"This user can not log equipment\"});\n        }\n        else {\n            let ton_weight;\n            Types.findById({ _id: req.body.sub_category_id }).exec((err, type) => {\n                console.log(\"Sub category\", type)\n                if (err) {\n                    // console.log(err);\n                    return res.json({error: true, status: 401, message: \"Failed fetch types\"})\n                }\n                if (!type) {\n                    // console.log(err);\n                    return res.json({error: true, status: 404, message: \"Sub category not found\"});\n                }\n                \n                // note the weight is measured in tonage or ton, after the aggregation from the unit.\n                if (req.body.unit === 'kg') {\n                    ton_weight = 0.00110231 * req.body.weight;\n                }\n                if (req.body.unit === 'g') {\n                ton_weight = 0.0000011023 * req.body.weight;\n                }\n                // const ton_weight = req.body.unit * req.body.weight;\n                // const total = type.price *  req.body.quantity * ton_weight;\n                const total = type.price * ton_weight;\n                const pin = Math.random().toString(36).slice(2);\n                 let log = new Log({\n                category_id: req.body.category_id,\n                // unit_price: type.price,\n                price: type.price,\n                total: Math.round(total),\n                sub_category_id: req.body.sub_category_id,\n                quantity: req.body.quantity,\n                weight: ton_weight,\n                unit: req.body.unit,\n                unit_weight: req.body.weight,\n                user_id: req.body.user_id,\n                equipment_pin: pin,\n                created_at: Date.now(),\n                updated_at: Date.now()\n        \n            });\n            log.save()\n            .then(data => {\n                res.status(201).json({log: data, error: false, message: \"equipment saved successful!\" });\n            })\n            .catch(err => {\n                console.log(err);\n                res.status(401).send({error: true, message: \"Failed to save equipment\"});\n            });\n        });\n        }\n    });\n}\n\nexport const update_logged_equipment = async (req, res) => {\n    if (\n        (!req.body.category_id) ||\n        // (!req.body.price) ||\n        (!req.body.sub_category_id) ||\n        (!req.body.quantity) ||\n        (!req.body.weight) ||\n        (!req.body.unit) ||\n        (!req.body.user_id)\n        // (!req.body.user_id)\n        ) {\n            return res.status(401).send({error: true, message: \"Category_id, unit, type, quantity, weight and user_id are required\"});\n    }\n    Log.findById(req.params.id, (err, log) => {\n        if (err) {\n            console.log(err);\n        }\n        if (!log) {\n            // return next(new Error('Could not find logged eqiupment'));\n            return res.status(404).send({error: true, message: \"Could not find logged eqiupment\"});\n        }\n        if (log.user_id != req.body.user_id) {\n            // return next(new Error('Could not find logged eqiupment'));\n            return res.status(402).send({error: true, message: \"You can not update this log\"});\n        } \n        if (log.paid === true) {\n            return res.status(401).send({error: true, message: \"you can not update this logged eqiupment, it has been paid for\"});\n        }  \n        else {\n            let ton_weight;\n            Types.findById({ _id: req.body.sub_category_id }).exec((err, type) => {\n                if (err) {\n                    console.log(err);\n                    return res.json({error: true, status: 401, message: \"Failed fetch types\"})\n                }\n                if (!type) {\n                    console.log(err);\n                    return res.json({error: true, status: 404, message: \"Sub category not found\"})\n                }\n                \n                // note the weight is measured in tonage or ton, after the aggregation from the unit.\n                if (req.body.unit === 'kg') {\n                    ton_weight = 0.00110231 * req.body.weight;\n                }\n                if (req.body.unit === 'g') {\n                    ton_weight = 0.0000011023 * req.body.weight;\n                }\n                const total = type.price * req.body.weight;\n            \n                log.category_id = req.body.category_id,\n                // log.category_name = req.body.category_name,\n                log.price = type.price,\n                log.total = total,\n                log.sub_category_id = req.body.sub_category_id,\n                // log.sub_category_name = req.body.sub_category_name,\n                log.quantity = req.body.quantity,\n                log.weight = req.body.weight,\n                // log.user_id = req.body.user_id,\n                // log.equipment_pin = pin,\n                log.updated_at = Date.now()\n                // user.body.user = req.body;\n                log.save().then(result => {\n                    res.status(201).json({error: false, message: \"Log update successful\" });\n                    // res.json({ 'log': result });\n                    //res.status(200).send({mssage: 'update successful'});\n                }).catch(err => {\n                    // console.log(err);\n                    res.send({ error: true, message: 'failed to update logged equipment' });\n            });\n        });\n        }\n        \n    });\n}\n\nexport const fetch_user_loged_equiptment_byid = async (req, res) => {\n    const page = parseInt(req.query.page);\n    const limit = parseInt(req.query.limit);\n    const startIndex = (page - 1) * limit;\n    const endIndex = page * limit;\n    const results = {};\n\n    const total_equipment_logged = await Log.countDocuments({user_id: req.params.id}).exec();\n    const total_number_paid = await Log.countDocuments({user_id: req.params.id, paid: true}).exec();\n\n    if (endIndex <  await Log.countDocuments().exec()) {\n        results.next = {\n            page: page + 1,\n            limit: limit\n        }\n    }\n\n    if (startIndex > 0) {\n        results.previous = {\n            page: page - 1,\n            limit: limit\n        }\n    }\n    Log.find({user_id: req.params.id}).populate('category_id').populate('sub_category_id').sort('-created_at').limit(limit).skip(startIndex).exec((err, equipment, next) => {\n        if (err) {\n            // console.log(err);\n            return res.json({error: true, status: 401, message: \"Failed to fetch user logged equipment\"})\n        }\n        if (!equipment) {\n            // console.log(err);\n            return res.json({error: true, status: 404, message: \"user logged equipment not found\"})\n        }\n        const log_weight = equipment.reduce(function (previousValue, currentValue) {\n            return previousValue + currentValue.weight;\n        }, 0);\n\n        const value = equipment.filter(result => result.paid === true);\n        \n        const total_payment_made = value.reduce(function (previousValue, currentValue) {\n            return previousValue + currentValue.total;\n        }, 0);\n\n        const value2 = equipment.filter(result => result.paid === false);\n        \n        const total_unpaid = value2.reduce(function (previousValue, currentValue) {\n            return previousValue + currentValue.total;\n        }, 0);\n        \n        // const amount_unpaid = \n        const number_of_unpaid = total_equipment_logged - total_number_paid;\n       \n        return res.json({error: false, status: 201, total_logged_equipment_paid: total_number_paid, unpaid_log_number: number_of_unpaid, total_payment_made: total_payment_made, unpaid_payment: total_unpaid, total_logged_eqiupment: total_equipment_logged, total_weight_logged: log_weight, pagination: results, log: equipment, message: \"Fetch all logged equipments successful!\" });\n    });\n}\n\nexport const fetch_user_loged_equiptment_byid_paid_status = async (req, res) => {\n    const page = parseInt(req.query.page);\n    const limit = parseInt(req.query.limit);\n    const startIndex = (page - 1) * limit;\n    const endIndex = page * limit;\n    const results = {};\n\n    const total_equipment_logged = await Log.countDocuments({user_id: req.params.id, paid: req.query.paid}).exec();\n    // const total_number_paid = await Log.countDocuments({user_id: req.params.id, paid: true}).exec();\n\n    if (endIndex <  await Log.countDocuments().exec()) {\n        results.next = {\n            page: page + 1,\n            limit: limit\n        }\n    }\n\n    if (startIndex > 0) {\n        results.previous = {\n            page: page - 1,\n            limit: limit\n        }\n    }\n    Log.find({user_id: req.params.id, paid: req.query.paid}).populate('category_id').populate('sub_category_id').sort('-created_at').limit(limit).skip(startIndex).exec((err, equipment, next) => {\n        if (err) {\n            // console.log(err);\n            return res.json({error: true, status: 401, message: \"Failed to fetch user logged equipment\"})\n        }\n        if (!equipment) {\n            // console.log(err);\n            return res.json({error: true, status: 404, message: \"user logged equipment not found\"})\n        }\n       \n        return res.json({error: false, status: 201, total_logged_eqiupment: total_equipment_logged, pagination: results, log: equipment, message: \"success\" });\n    });\n}\n\nexport const fetch_user_loged_equiptment_by_payment = async (req, res) => {\n    const page = parseInt(req.query.page);\n    const limit = parseInt(req.query.limit);\n    const startIndex = (page - 1) * limit;\n    const endIndex = page * limit;\n    const results = {};\n\n    // const total_equipment_logged = await Log.countDocuments({user_id: req.params.id}).exec();\n    // const total_number_paid = await Log.countDocuments({user_id: req.params.id, paid: true}).exec();\n\n    if (endIndex <  await Log.countDocuments().exec()) {\n        results.next = {\n            page: page + 1,\n            limit: limit\n        }\n    }\n\n    if (startIndex > 0) {\n        results.previous = {\n            page: page - 1,\n            limit: limit\n        }\n    }\n    Log.find({user_id: req.params.id}).populate('category_id').populate('sub_category_id').sort('-created_at').limit(limit).skip(startIndex).exec((err, equipment, next) => {\n        if (err) {\n            // console.log(err);\n            return res.json({error: true, status: 401, message: \"Failed to fetch user logged equipment\"})\n        }\n        if (!equipment) {\n            return res.json({error: true, status: 404, message: \"Log equipent does not exist!\"})\n        }\n        const log_weight = equipment.reduce(function (previousValue, currentValue) {\n            return previousValue + currentValue.weight;\n        }, 0);\n\n        const value = equipment.filter(result => result.paid === true);\n        \n        const total_payment_made = value.reduce(function (previousValue, currentValue) {\n            return previousValue + currentValue.total;\n        }, 0);\n\n        const value2 = equipment.filter(result => result.paid === false);\n        \n        const total_unpaid = value2.reduce(function (previousValue, currentValue) {\n            return previousValue + currentValue.total;\n        }, 0);\n        \n        // const amount_unpaid = \n        const number_of_unpaid = total_equipment_logged - total_number_paid;\n       \n        return res.json({error: false, status: 201, total_logged_equipment_paid: total_number_paid, unpaid_log_number: number_of_unpaid, total_payment_made: total_payment_made, unpaid_payment: total_unpaid, total_logged_eqiupment: total_equipment_logged, total_weight_logged: log_weight, pagination: results, log: equipment, message: \"Fetch all logged equipments successful!\" });\n    });\n}\n\n\nexport const fetch_all_loged_equiptments = async (req, res) => {\n    const page = parseInt(req.query.page);\n    const limit = parseInt(req.query.limit);\n    const startIndex = (page - 1) * limit;\n    const endIndex = page * limit;\n    const results = {};\n    const total_log = await Log.countDocuments().exec();\n    if (endIndex <  await Log.countDocuments().exec()) {\n        results.next = {\n            page: page + 1,\n            limit: limit\n        }\n    }\n\n    if (startIndex > 0) {\n        results.previous = {\n            page: page - 1,\n            limit: limit\n        }\n    }\n    Log.find({}).sort('-created_at').populate('category_id').populate('sub_category_id').limit(limit).skip(startIndex).exec((err, equipment, next) => {\n        if (err) {\n            console.log(err);\n            return res.json({error: true, status: 401, message: \"Failed to fetch logged equipment\"})\n        }\n        // console.log(\"pageNumber:\", startIndex)\n        return res.json({error: false, status: 201, pagination: results, log: equipment, total: total_log,  message: \"Fetch all logged equipments successful!\" });\n    });\n}\n\n\n\nexport const remove_log_equipment = (req, res) => {\n    Log.findByIdAndRemove({ _id: req.params.id }, (err, log) => {\n        if (err) {\n            return res.json({error: true, status: 401, message: \"error occured\"});\n            // res.json(err);\n        }\n        if (!log) {\n            return res.json({error: true, status: 401, message: \"log equipment not found\"});\n            // res.json(err);\n        }\n        if (log.paid === true) {\n            return res.status(401).send({error: true, message: \"you can not delete this log\"});\n        }\n        else {\n            return res.json({error: false, status: 201, message: \"success!\" });\n            // res.json('removed successfully');\n        }\n    });\n}\n\n\nexport const bulk_log_upload = (upload.single(\"log\"), async (req, res, next) => {\n    // console.log(\"loggggggg\", upload);\n    // console.log(\"filesssssssssssss\", req.file);\n    await csv().fromFile(req.file.path).then((jsonObj)=>{\n        // console.log(\"jsonnnnnnnnnnnnnnnnn\", jsonObj);\n        var army = [];\n        for(var i = 0;i<jsonObj.length;i++){\n            var obj={};\n            obj.firstName = jsonObj[i]['First Name'];\n            obj.lastName = jsonObj[i]['Last Name'];\n            obj.house = jsonObj[i]['House'];\n\n            obj.house = jsonObj[i]['House'];\n\n            obj.category_id = jsonObj[i]['category_id'],\n            obj.category_name = jsonObj[i]['category_name'],\n            // obj.price = type.price,\n            // obj.total = total,\n            obj.sub_category_id = jsonObj[i]['sub_category_id'],\n            obj.sub_category_name= jsonObj[i]['sub_category_name'],\n            obj.quantity = jsonObj[i]['quantity'],\n            obj.weight = jsonObj[i]['weight'],\n            obj.user_id = jsonObj[i]['user_id'],\n            obj.equipment_pin = jsonObj[i]['equipment_pin'],\n            // created_at: Date.now(),\n            // updated_at: Date.now()\n\n\n            army.push(obj);\n        }\n        console.log(\"armyyyyyyy\", army);\n        Log.insertMany(army).then(() => {\n            res.status(200).send({\n                message: \"Successfully Uploaded!\"\n            });\n        }).catch((error) => {\n            res.status(500).send({\n                message: \"failure\",\n                error\n            });\n        });\n    }).catch((error) => {\n        res.status(500).send({\n            message: \"failure\",\n            error: error\n        });\n    })\n});\n\n\n\nexport const bulk_log_upload2 = (upload.single(\"file\"), async (req, res, next) => {\n    console.log(\"reqqqqqqqq\", req.body)\n    if (!req.files)\n        return res.status(400).send('No files were uploaded.');\n     \n    var authorFile = req.files.file;\n \n    var authors = [];\n\n    csvtojson({\n        noheader:true,\n        output: \"csv\"\n    })\n    .fromString(req.body)\n    .then((csvRow)=>{ \n        console.log(\"csvvvvvvvvvvvvv\", csvRow) // => [[\"1\",\"2\",\"3\"], [\"4\",\"5\",\"6\"], [\"7\",\"8\",\"9\"]]\n    })\n         \n    // csvtojson\n    //  .parseFile(req.body).then(csvData => {\n    //     console.log(\"csv datatttttttt\", csvData)\n    //     Log.insertMany(csvData).then(() => {\n    //         console.log(\"Data saved\");\n    //         return res.status(200).send({success: 'Data saved.'});\n    //     }).catch((error) => {\n    //         res.status(500).send({\n    //             message: \"failure\",\n    //             error\n    //         });\n    //     });\n    //  })\n});\n\n\n\n\nexport const bulk_log_upload3 = async (req, res, next) => {\n    console.log(\"reqqqqqqqq\", req.file)\n\n    // try{ let data = req.body; console.log(\"datatatata\", data); res.status(200).send('success'); }catch(e){ res.status(400).send(e), console.log(e) }\n    if (!req.files)\n        return res.status(400).send('No files were uploaded.');\n     \n    var authorFile = req.files.file;\n \n    var authors = [];\n         \n    csv\n     .fromString(authorFile.data.toString(), {\n         headers: true,\n         ignoreEmpty: true\n     })\n     .on(\"data\", function(data){\n         data['_id'] = new mongoose.Types.ObjectId();\n          \n         authors.push(data);\n     })\n     .on(\"end\", function(){\n         Authors.create(authors, function(err, documents) {\n            if (err) throw err;\n         });\n          \n         res.send(authors.length + ' authors have been successfully uploaded.');\n     });\n};\n\n\nexport const log_equiptment2 = async (req, res) => {\n    if (\n        (!req.body.category_id) ||\n        // (!req.body.price) ||\n        (!req.body.sub_category_id) ||\n        (!req.body.quantity) ||\n        (!req.body.weight) ||\n        (!req.body.unit) ||\n        (!req.body.user_id)\n        ) {\n        return res.status(401).send({error: true, message: \"Category_id, unit, type, quantity, weight and user_id are required\"});\n    } \n\n    User.findById({_id: req.body.user_id}).exec((err, user) => {\n        if (err) {\n            // console.log(err);\n            return res.send(err);\n        }\n        if (!user) {\n            return res.status(404).send({error: true, message: \"User not found\"});;\n        }\n\n        if (user.role != 'manufacturer') {\n            return res.status(401).send({error: true, message: \"This user can not log equipment\"});\n        }\n        else {\n            let ton_weight;\n            Types.findById({ _id: req.body.sub_category_id }).exec((err, type) => {\n                console.log(\"Sub category\", type)\n                if (err) {\n                    // console.log(err);\n                    return res.json({error: true, status: 401, message: \"Failed fetch types\"})\n                }\n                if (!type) {\n                    // console.log(err);\n                    return res.json({error: true, status: 404, message: \"Sub category not found\"});\n                }\n                \n                // note the weight is measured in tonage or ton, after the aggregation from the unit.\n                if (req.body.unit === 'kg') {\n                    ton_weight = 0.00110231 * req.body.weight;\n                }\n                if (req.body.unit === 'g') {\n                ton_weight = 0.0000011023 * req.body.weight;\n                }\n                // const ton_weight = req.body.unit * req.body.weight;\n                // const total = type.price *  req.body.quantity * ton_weight;\n                const total = type.price * ton_weight;\n                const pin = Math.random().toString(36).slice(2);\n                 let log = new Log({\n                category_id: req.body.category_id,\n                // unit_price: type.price,\n                price: type.price,\n                total: Math.round(total),\n                sub_category_id: req.body.sub_category_id,\n                quantity: req.body.quantity,\n                weight: ton_weight,\n                unit: req.body.unit,\n                unit_weight: req.body.weight,\n                user_id: req.body.user_id,\n                equipment_pin: pin,\n                created_at: Date.now(),\n                updated_at: Date.now()\n        \n            });\n            log.save()\n            .then(data => {\n                res.status(201).json({log: data, error: false, message: \"equipment saved successful!\" });\n            })\n            .catch(err => {\n                console.log(err);\n                res.status(401).send({error: true, message: \"Failed to save equipment\"});\n            });\n        });\n        }\n    });\n}\n\nexport const excel_bulk_equipment = async (req, res) => {\n    User.findById({ _id: req.body.user_id, role: 'manufacturer' }).exec((err, user) => {\n        if (\n            (!req.body.category_id) ||\n            (!req.body.total) ||\n            (!req.body.price) ||\n            (!req.body.sub_category_id) ||\n            (!req.body.unit_weight) ||\n            (!req.body.quantity) ||\n            (!req.body.weight) ||\n            (!req.body.unit) ||\n            (!req.body.user_id)\n            ) {\n            return res.status(401).send({error: true, message: \"Category_id, price, sub_category_id, unit_weight, unit, total, quantity, weight and user_id are required\"});\n        }\n        if (err) {\n            return res.json({error: true, status: 401, message: \"error occured for this user\"});\n        }\n        if (!user) {\n            return res.json({error: true, status: 401, message: \"user not found\"});\n        }\n        let log = new Log({\n            category_id: req.body.category_id,\n            // unit_price: type.price,\n            price: req.body.price,\n            total: req.body.total,\n            sub_category_id: req.body.sub_category_id,\n            quantity: req.body.quantity,\n            weight: req.body.weight,\n            unit: req.body.unit,\n            unit_weight: req.body.unit_weight,\n            user_id: req.body.user_id,\n            equipment_pin: req.body.equipment_pin,\n            created_at: Date.now(),\n            updated_at: Date.now()\n        }); \n        log.save().then(data => {\n            res.status(201).json({error: false, message: \"bulk equipment saved successful!\" });\n        }).catch(err => {\n            console.log(err);\n            res.status(401).send({error: true, message: \"Failed to save bulk equipment\"});\n        });\n    });\n};\n\n\nexport const get_price_of_equipment_for_payment = (req, res) => {\n    Log.find({equipment_pin: req.params.pin}).sort('-created_at').exec((err, log) => {\n        if (err) {\n            return res.status(401).send({error: true, message: \"error occured while finding ewaste\"});\n        }\n        if (!log) {\n            // console.log(err);\n            return res.status(404).send({error: true, message: \"ewastes not found\"});\n        }\n        const total_payment = log.reduce(function (previousValue, currentValue) {\n            return previousValue + currentValue.total;\n        }, 0);\n        return res.status(201).send({error: false, message: \"success\", total_payment: total_payment});\n\n    });\n}\n\n\n\n\n\n\n// const fileName = req.body.fileName\n \n// csv()\n//   .fromFile(req.file.path)\n//   .then((jsonObj) => {\n//     //finding the document using fileName and setting csvData as the jsonObj\n//     sheetModel.findOneAndUpdate({ fileName: fileName }, {$set: { csvData: jsonObj, fileName: fileName}, { upsert: true }}, (err, data) => {\n//       if (err) {\n//         res.status(400).json({\n//           message: \"Something went wrong!\",\n//         });\n//       } else {\n//         res.status(200).json({\n//           message: \"File Uploaded Successfully!\",\n//           result: data,\n//         });\n//       }\n//     });\n//   });\n\n\n\n\n\n\n"],"mappings":";;;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AAEA;;AAGA;;AACA;;AAMA;;AACA;;AAUA;;AACA;;AACA;;AAnCA;AACA;AAQA;AAEA,IAAMA,MAAM,GAAG,IAAAC,kBAAA,EAAO;EAAEC,IAAI,EAAE;AAAR,CAAP,CAAf;AAcA,IAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAa,kDAAb,CAAjB;AAKA,IAAIC,OAAO,GAAG,oDAAd;AACA,IAAIC,MAAM,GAAG,qDAAb;;AAMA;AAEA;AACA;AAEA,IAAMC,MAAM,GAAGC,mBAAA,CAAQC,MAAR,EAAf;;AAIO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,GAAN,EAAc;EACvCT,QAAQ,CAACU,QAAT,CAAkBC,IAAlB,CAAuB,UAASC,KAAT,EAAgBC,IAAhB,EAAsB;IACzC,IAAI,CAACD,KAAL,EAAY;MACZ,OAAOH,GAAG,CAACK,IAAJ,CAAS;QAACF,KAAK,EAAE,KAAR;QAAeG,MAAM,EAAE,GAAvB;QAA4BC,SAAS,EAAEH,IAAvC;QAA6CI,OAAO,EAAE;MAAtD,CAAT,CAAP;IAEC;;IAAC,IAAIL,KAAJ,EAAW;MACT;MACA,OAAOH,GAAG,CAACK,IAAJ,CAAS;QAACF,KAAK,EAAE,IAAR;QAAcG,MAAM,EAAE,GAAtB;QAA2BE,OAAO,EAAEL;MAApC,CAAT,CAAP;IACH;EACJ,CARD;AASH,CAVM;;;;AAYA,IAAMM,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACV,GAAD,EAAMC,GAAN,EAAc;EACjDT,QAAQ,CAACmB,WAAT,CAAqBC,UAArB,CAAgC;IAC5BC,KAAK,EAAEb,GAAG,CAACK,IAAJ,CAASQ,KADY;IAE5BC,MAAM,EAAEC,MAAM,CAACf,GAAG,CAACK,IAAJ,CAASS,MAAV,CAAN,GAA0B;EAFN,CAAhC,EAGGE,IAHH,CAGQ,UAACX,IAAD,EAAU;IACd,OAAOJ,GAAG,CAACK,IAAJ,CAAS;MAACF,KAAK,EAAE,KAAR;MAAeG,MAAM,EAAE,GAAvB;MAA4BC,SAAS,EAAEH,IAAI,CAACY,IAA5C;MAAkDR,OAAO,EAAE;IAA3D,CAAT,CAAP,CADc,CAEd;IACA;EACH,CAPD,WAOS,UAACL,KAAD,EAAW;IAChB,OAAOH,GAAG,CAACK,IAAJ,CAAS;MAACF,KAAK,EAAE,IAAR;MAAcG,MAAM,EAAE,GAAtB;MAA2BE,OAAO,EAAEL;IAApC,CAAT,CAAP,CADgB,CAEhB;EACH,CAVD;AAWH,CAZM;;;;AAcA,IAAMc,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAClB,GAAD,EAAMC,GAAN,EAAc;EAC/CkB,oBAAA,CAAIC,IAAJ,CAAS;IAACC,aAAa,EAAErB,GAAG,CAACsB,MAAJ,CAAWC;EAA3B,CAAT,EAA0CC,IAA1C,CAA+C,UAACC,GAAD,EAAMC,GAAN,EAAc;IACzD,IAAID,GAAJ,EAAS;MACL,OAAOxB,GAAG,CAACK,IAAJ,CAAS;QAACF,KAAK,EAAE,IAAR;QAAcG,MAAM,EAAE,GAAtB;QAA2BE,OAAO,EAAE;MAApC,CAAT,CAAP;IACH;;IACD,IAAI,CAACiB,GAAL,EAAU;MACN,OAAOzB,GAAG,CAACK,IAAJ,CAAS;QAACF,KAAK,EAAE,IAAR;QAAcG,MAAM,EAAE,GAAtB;QAA2BE,OAAO,EAAE;MAApC,CAAT,CAAP;IACH,CAFD,MAGK;MACDiB,GAAG,CAAC,CAAD,CAAH,CAAOC,IAAP,GAAc,IAAd;MACAD,GAAG,CAAC,CAAD,CAAH,CAAOE,SAAP,GAAmB5B,GAAG,CAACsB,MAAJ,CAAWO,GAA9B;MACAH,GAAG,CAAC,CAAD,CAAH,CAAOI,IAAP,GAAcd,IAAd,CAAmB,UAAAe,MAAM,EAAI;QACzB,OAAO9B,GAAG,CAACK,IAAJ,CAAS;UAACF,KAAK,EAAE,KAAR;UAAeG,MAAM,EAAE,GAAvB;UAA4BE,OAAO,EAAE;QAArC,CAAT,CAAP;MACH,CAFD,WAES,UAAAgB,GAAG,EAAI;QACZ,OAAOxB,GAAG,CAACK,IAAJ,CAAS;UAACF,KAAK,EAAE,IAAR;UAAcG,MAAM,EAAE,GAAtB;UAA2BE,OAAO,EAAE;QAApC,CAAT,CAAP;MACH,CAJD;IAKH;EACJ,CAhBD;AAiBH,CAlBM,C,CAqBP;;;;;AACO,IAAMuB,+BAA+B;EAAA,yFAAG,iBAAOhC,GAAP,EAAYC,GAAZ;IAAA;MAAA;QAAA;UAAA;YAC3CkB,oBAAA,CAAIc,UAAJ,CAAe;cAACZ,aAAa,EAAErB,GAAG,CAACsB,MAAJ,CAAWC;YAA3B,CAAf,EAAgD;cAACI,IAAI,EAAE;YAAP,CAAhD,EAA8DH,IAA9D,CAAmE,UAACC,GAAD,EAAMC,GAAN,EAAc;cAC7EQ,mBAAA,CAAQR,GAAR,CAAY,eAAZ,EAA6BA,GAA7B;;cACA,IAAID,GAAJ,EAAS;gBACL,OAAOxB,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cACD,IAAI,CAACiB,GAAL,EAAU;gBACN,OAAOzB,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cACD,IAAIiB,GAAG,CAACS,YAAJ,IAAoB,IAAxB,EAA8B;gBAC1B,OAAOlC,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cACD,IAAIiB,GAAG,CAACS,YAAJ,KAAqB,IAAzB,EAA+B;gBAC3B,OAAOlC,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,KAAR;kBAAeG,MAAM,EAAE,GAAvB;kBAA4BE,OAAO,EAAE;gBAArC,CAAT,CAAP;cACH;YACJ,CAdD;;UAD2C;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAA/BuB,+BAA+B;IAAA;EAAA;AAAA,GAArC;;;;AAmBA,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAACpC,GAAD,EAAMC,GAAN,EAAc;EACtCoC,qBAAA,CAAKC,QAAL,CAActC,GAAG,CAACsB,MAAJ,CAAWiB,EAAzB,EAA6Bf,IAA7B,CAAkC,UAACC,GAAD,EAAMe,IAAN,EAAe;IAC7C,IAAIf,GAAJ,EAAS;MACLS,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;MACA,OAAOxB,GAAG,CAACwC,IAAJ,CAAShB,GAAT,CAAP;IACH,CAJ4C,CAK7C;;;IACAxB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;MAACkC,IAAI,EAAJA;IAAD,CAArB,EAN6C,CAO7C;IACA;EACH,CATD;AAUH,CAXM,C,CAaP;AACA;;;;;AAEO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAC1C,GAAD,EAAMC,GAAN,EAAc;EAEvC,IAAM0C,SAAS,GAAGC,yBAAA,CAAQC,eAAR,EAAlB;;EACA,OAAO5C,GAAG,CAACK,IAAJ,CAAS;IAACF,KAAK,EAAE,KAAR;IAAeK,OAAO,EAAE,kBAAxB;IAA4CQ,IAAI,EAAE0B,SAAlD;IAA8DpC,MAAM,EAAE,SAAtE;IAAiFuC,IAAI,EAAE;EAAvF,CAAT,CAAP;AACH,CAJM;;;;AAMA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAC/C,GAAD,EAAMC,GAAN,EAAc;EACpC,IAAMsC,EAAE,GAAIvC,GAAG,CAACsB,MAAJ,CAAW0B,OAAvB;;EACA,IAAMC,MAAM,GAAGC,uBAAA,CAAMC,kBAAN,CAAyBZ,EAAzB,CAAf;;EACA,OAAOtC,GAAG,CAACK,IAAJ,CAAS;IAACF,KAAK,EAAE,KAAR;IAAeK,OAAO,EAAE,eAAxB;IAAyCQ,IAAI,EAAEgC,MAA/C;IAAwD1C,MAAM,EAAE,SAAhE;IAA2EuC,IAAI,EAAE;EAAjF,CAAT,CAAP;AACH,CAJM;;;;AAMA,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACpD,GAAD,EAAMC,GAAN,EAAc;EACpC,IAAMsC,EAAE,GAAIvC,GAAG,CAACsB,MAAJ,CAAW0B,OAAvB;EACA,IAAMK,GAAG,GAAGrD,GAAG,CAACsB,MAAJ,CAAWiB,EAAvB;;EACA,IAAMe,MAAM,GAAGC,sBAAA,CAAKC,gBAAL,CAAsBjB,EAAtB,EAA0Bc,GAA1B,CAAf;;EACA,OAAOpD,GAAG,CAACK,IAAJ,CAAS;IAACF,KAAK,EAAE,KAAR;IAAeK,OAAO,EAAE,eAAxB;IAAyCQ,IAAI,EAAEqC,MAA/C;IAAwD/C,MAAM,EAAE,SAAhE;IAA2EuC,IAAI,EAAE;EAAjF,CAAT,CAAP;AACH,CALM;;;;AAOA,IAAMW,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACzD,GAAD,EAAMC,GAAN,EAAc;EAC1C,IAAMgD,MAAM,GAAGS,qCAAA,CAAYT,MAAZ,EAAf;;EACA,OAAOhD,GAAG,CAACK,IAAJ,CAAS;IAACF,KAAK,EAAE,KAAR;IAAeK,OAAO,EAAE,eAAxB;IAAyCQ,IAAI,EAAEgC,MAA/C;IAAwD1C,MAAM,EAAE,SAAhE;IAA2EuC,IAAI,EAAE;EAAjF,CAAT,CAAP;AACH,CAHM;;;;AAKA,IAAMa,cAAc,GAAG,SAAjBA,cAAiB,CAAC3D,GAAD,EAAMC,GAAN,EAAc;EACxC,IAAMgD,MAAM,GAAGS,qCAAA,CAAYE,IAAZ,CAAiB5D,GAAG,CAACsB,MAAJ,CAAWuC,KAA5B,CAAf;;EACA,OAAO5D,GAAG,CAACK,IAAJ,CAAS;IAACF,KAAK,EAAE,KAAR;IAAeK,OAAO,EAAE,eAAxB;IAAyCQ,IAAI,EAAEgC,MAA/C;IAAwD1C,MAAM,EAAE,SAAhE;IAA2EuC,IAAI,EAAE;EAAjF,CAAT,CAAP;AACH,CAHM;;;;AAKA,IAAMgB,SAAS,GAAG,SAAZA,SAAY,CAAC9D,GAAD,EAAMC,GAAN,EAAc;EACnC,IAAMgD,MAAM,GAAGS,qCAAA,CAAYK,GAAZ,EAAf;;EACA,OAAO9D,GAAG,CAACK,IAAJ,CAAS;IAACF,KAAK,EAAE,KAAR;IAAeK,OAAO,EAAE,eAAxB;IAAyCQ,IAAI,EAAEgC,MAA/C;IAAwD1C,MAAM,EAAE,SAAhE;IAA2EuC,IAAI,EAAE;EAAjF,CAAT,CAAP;AACH,CAHM;;;;AAMA,IAAMkB,cAAc,GAAG,SAAjBA,cAAiB,CAAChE,GAAD,EAAMC,GAAN,EAAc;EACxCoC,qBAAA,CAAKC,QAAL,CAActC,GAAG,CAACsB,MAAJ,CAAWiB,EAAzB,EAA6B,UAACd,GAAD,EAAMe,IAAN,EAAe;IACxC,IAAIf,GAAJ,EAAS;MACLS,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;IACH;;IACD,IAAI,CAACe,IAAL,EACI,OAAOyB,IAAI,CAAC,IAAIC,KAAJ,CAAU,yBAAV,CAAD,CAAX,CADJ,KAEK;MACD;MACA;MACA1B,IAAI,CAAC2B,IAAL,GAAYnE,GAAG,CAACK,IAAJ,CAAS8D,IAArB,CAHC,CAID;;MACA3B,IAAI,CAAC4B,WAAL,GAAmBpE,GAAG,CAACK,IAAJ,CAAS+D,WAA5B;MACA5B,IAAI,CAAC6B,OAAL,GAAerE,GAAG,CAACK,IAAJ,CAASgE,OAAxB;MACA7B,IAAI,CAACqB,KAAL,GAAa7D,GAAG,CAACK,IAAJ,CAASwD,KAAtB,CAPC,CAQD;MACA;MAEA;;MACArB,IAAI,CAACV,IAAL,GAAYd,IAAZ,CAAiB,UAAAe,MAAM,EAAI;QACvB9B,GAAG,CAACK,IAAJ,CAAS;UAAE,UAAUyB;QAAZ,CAAT,EADuB,CAEvB;MACH,CAHD,WAGS,UAAAN,GAAG,EAAI;QACZS,mBAAA,CAAQR,GAAR,CAAYD,GAAG,CAACqB,IAAhB;;QACA7C,GAAG,CAACwC,IAAJ,CAAS;UAAErC,KAAK,EAAE,IAAT;UAAeK,OAAO,EAAE;QAAxB,CAAT;MACH,CAND;IAOH;EACJ,CA1BD;AA2BH,CA5BM;;;;AA8BA,IAAM6D,iBAAiB;EAAA,0FAAG,kBAAOtE,GAAP,EAAYC,GAAZ;IAAA;IAAA;MAAA;QAAA;UAAA;YACvBsE,IADuB,GAChBC,QAAQ,CAACxE,GAAG,CAACyE,KAAJ,CAAUF,IAAX,CADQ;YAEvBG,KAFuB,GAEfF,QAAQ,CAACxE,GAAG,CAACyE,KAAJ,CAAUC,KAAX,CAFO;YAGvBC,UAHuB,GAGV,CAACJ,IAAI,GAAG,CAAR,IAAaG,KAHH;YAIvBE,QAJuB,GAIZL,IAAI,GAAGG,KAJK;YAKvBG,OALuB,GAKb,EALa;YAAA;YAAA,OAOTxC,qBAAA,CAAKyC,cAAL,CAAoB;cAACC,IAAI,EAAE/E,GAAG,CAACsB,MAAJ,CAAWyD;YAAlB,CAApB,EAA6CvD,IAA7C,EAPS;;UAAA;YAOvBwD,KAPuB;YAAA,eASzBJ,QATyB;YAAA;YAAA,OASPvC,qBAAA,CAAKyC,cAAL,GAAsBtD,IAAtB,EATO;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAUzBqD,OAAO,CAACZ,IAAR,GAAe;cACXM,IAAI,EAAEA,IAAI,GAAG,CADF;cAEXG,KAAK,EAAEA;YAFI,CAAf;;UAVyB;YAgB7B,IAAIC,UAAU,GAAG,CAAjB,EAAoB;cAChBE,OAAO,CAACI,QAAR,GAAmB;gBACfV,IAAI,EAAEA,IAAI,GAAG,CADE;gBAEfG,KAAK,EAAEA;cAFQ,CAAnB;YAIH;;YACDrC,qBAAA,CAAKjB,IAAL,CAAU;cAAC2D,IAAI,EAAE/E,GAAG,CAACsB,MAAJ,CAAWyD;YAAlB,CAAV,EAAmCG,IAAnC,CAAwC,aAAxC,EAAuDR,KAAvD,CAA6DA,KAA7D,EAAoES,IAApE,CAAyER,UAAzE,EAAqFnD,IAArF,CAA0F,UAACC,GAAD,EAAMe,IAAN,EAAe;cACrG,IAAIf,GAAJ,EAAS;gBACLS,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;gBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cACD,IAAI,CAAC+B,IAAL,EAAW;gBACPN,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;gBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cAED,OAAOR,GAAG,CAACK,IAAJ,CAAS;gBAACF,KAAK,EAAE,KAAR;gBAAeG,MAAM,EAAE,GAAvB;gBAA4ByE,KAAK,EAAEA,KAAnC;gBAA0CI,UAAU,EAAEP,OAAtD;gBAA+DrC,IAAI,EAAEA,IAArE;gBAA2E/B,OAAO,EAAE;cAApF,CAAT,CAAP;YACH,CAXD;;UAtB6B;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAjB6D,iBAAiB;IAAA;EAAA;AAAA,GAAvB;;;;AAoCA,IAAMe,cAAc;EAAA,0FAAG,kBAAOrF,GAAP,EAAYC,GAAZ;IAAA;MAAA;QAAA;UAAA;YAE1BoC,qBAAA,CAAKjB,IAAL,CAAU;cAAEkE,GAAG,EAAEtF,GAAG,CAACsB,MAAJ,CAAWiB;YAAlB,CAAV,EAAkCf,IAAlC,CAAuC,UAACC,GAAD,EAAMe,IAAN,EAAe;cAClD,IAAIf,GAAJ,EAAS;gBACLS,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;gBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cACD,IAAI,CAAC+B,IAAL,EAAW;gBACPN,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;gBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cAED,OAAOR,GAAG,CAACK,IAAJ,CAAS;gBAACF,KAAK,EAAE,KAAR;gBAAeG,MAAM,EAAE,GAAvB;gBAA4BiC,IAAI,EAAEA,IAAlC;gBAAwC/B,OAAO,EAAE;cAAjD,CAAT,CAAP;YACH,CAXD;;UAF0B;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAd4E,cAAc;IAAA;EAAA;AAAA,GAApB;;;;AAiBA,IAAME,kCAAkC;EAAA,0FAAG,kBAAOvF,GAAP,EAAYC,GAAZ;IAAA;MAAA;QAAA;UAAA;YAE9CoC,qBAAA,CAAKjB,IAAL,CAAU;cAAEoE,GAAG,EAAExF,GAAG,CAACsB,MAAJ,CAAWkE,GAAlB;cAAuBT,IAAI,EAAE;YAA7B,CAAV,EAAsDvD,IAAtD,CAA2D,UAACC,GAAD,EAAMe,IAAN,EAAe;cACtE,IAAIf,GAAJ,EAAS;gBACLS,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;gBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cACD,IAAI,CAAC+B,IAAL,EAAW;gBACPN,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;gBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cAED,OAAOR,GAAG,CAACK,IAAJ,CAAS;gBAACF,KAAK,EAAE,KAAR;gBAAeG,MAAM,EAAE,GAAvB;gBAA4BiC,IAAI,EAAEA,IAAlC;gBAAwC/B,OAAO,EAAE;cAAjD,CAAT,CAAP;YACH,CAXD;;UAF8C;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAlC8E,kCAAkC;IAAA;EAAA;AAAA,GAAxC,C,CAoBP;;;;;AACO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACzF,GAAD,EAAMC,GAAN,EAAWgE,IAAX,EAAoB;EAC/C;EACAyB,iBAAA,CAAMC,SAAN,CAAgB,CACZ,UAACC,IAAD,EAAU;IACNC,kBAAA,CAAOC,WAAP,CAAmB,EAAnB,EAAuB,UAACrE,GAAD,EAAMsE,GAAN,EAAc;MACjC,IAAIC,KAAK,GAAGD,GAAG,CAACE,QAAJ,CAAa,KAAb,CAAZ;MACAL,IAAI,CAACnE,GAAD,EAAMuE,KAAN,CAAJ;IACH,CAHD;EAIH,CANW,EAOZ,UAACA,KAAD,EAAQJ,IAAR,EAAiB;IACbvD,qBAAA,CAAK6D,OAAL,CAAa;MAAErF,KAAK,EAAEb,GAAG,CAACK,IAAJ,CAASQ;IAAlB,CAAb,EAAwC,UAACY,GAAD,EAAMe,IAAN,EAAe;MACpD,IAAI2D,SAAS,GAAGnG,GAAG,CAACK,IAAJ,CAASQ,KAAzB,CADoD,CAEnD;;MACA,IAAI,CAAC2B,IAAL,EAAW;QACP;QACA;QACA,OAAOvC,GAAG,CAACwC,IAAJ,CAAS;UAACrC,KAAK,EAAE,IAAR;UAAcK,OAAO,EAAE;QAAvB,CAAT,CAAP;MAEH;;MACD+B,IAAI,CAAC4D,kBAAL,GAA0BJ,KAA1B;MACAxD,IAAI,CAAC6D,oBAAL,GAA4BC,IAAI,CAACC,GAAL,KAAa,OAAzC;MAEA/D,IAAI,CAACV,IAAL,CAAU,UAAUL,GAAV,EAAe;QACrBmE,IAAI,CAACnE,GAAD,EAAMuE,KAAN,EAAaxD,IAAb,CAAJ;MACH,CAFD;IAGH,CAfD;EAgBH,CAxBW,EAyBZ,UAACwD,KAAD,EAAQxD,IAAR,EAAcoD,IAAd,EAAuB;IACnB,IAAIY,eAAe,GAAGC,sBAAA,CAAWC,eAAX,CAA2B;MAC7CC,OAAO,EAAE,OADoC;MAE7CC,IAAI,EAAE;QACFpE,IAAI,EAAE,wBADJ;QAEFqE,IAAI,EAAE;MAFJ;IAFuC,CAA3B,CAAtB;;IAQA,IAAIC,WAAW,GAAG;MACdC,IAAI,EAAE,sCADQ;MAEdC,EAAE,EAAEhH,GAAG,CAACK,IAAJ,CAASQ,KAFC;MAGdoG,OAAO,EAAE,qBAHK;MAIdC,IAAI,EAAE,mGAAmG,mGAAnG,GAAyM,gDAAzM,GAA4PlB,KAA5P,GAAoQ,MAApQ,GACN;IALc,CAAlB;IAOAQ,eAAe,CAACW,QAAhB,CAAyBL,WAAzB,EAAsC,UAASrF,GAAT,EAAcR,IAAd,EAAoB;MACtD;MACA,IAAGQ,GAAH,EAAQ;QACJ;QACA,OAAOxB,GAAG,CAACwC,IAAJ,CAAS;UAACrC,KAAK,EAAE,IAAR;UAAc0C,IAAI,EAAE,GAApB;UAAyBrC,OAAO,EAAE;QAAlC,CAAT,CAAP;MACH,CAHD,MAGO;QACH;QACA,OAAOR,GAAG,CAACK,IAAJ,CAAS;UAACF,KAAK,EAAE,KAAR;UAAe0C,IAAI,EAAE,GAArB;UAA0BvC,MAAM,EAAE,SAAlC;UAA6CE,OAAO,EAAE;QAAtD,CAAT,CAAP;MACH;IACJ,CATD,EAhBmB,CA+BnB;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH,CAxEW,CAAhB,WAyES,UAAAgB,GAAG,EAAI;IACXS,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;IACAxB,GAAG,CAACwC,IAAJ,CAAS;MAAChB,GAAG,EAAHA;IAAD,CAAT;EACH,CA5EF;AA8EH,CAhFM,C,CAoFP;;;;;AACO,IAAM2F,cAAc,GAAG,SAAjBA,cAAiB,CAACpH,GAAD,EAAMC,GAAN,EAAWgE,IAAX,EAAoB;EAC9C/B,mBAAA,CAAQR,GAAR,CAAY,uBAAZ,EAAqC1B,GAAG,CAACsB,MAAJ,CAAW0E,KAAhD;;EACHN,iBAAA,CAAMC,SAAN,CAAgB,CACR,UAACC,IAAD,EAAU;IACPvD,qBAAA,CAAK6D,OAAL,CAAa;MAAEE,kBAAkB,EAAEpG,GAAG,CAACsB,MAAJ,CAAW0E,KAAjC;MAAwCK,oBAAoB,EAAE;QAAEgB,GAAG,EAAEf,IAAI,CAACC,GAAL;MAAP;IAA9D,CAAb,EAAkG,UAAC9E,GAAD,EAAMe,IAAN,EAAe;MAC7G,IAAI,CAACA,IAAL,EAAW;QACP;QACA;QACA,OAAOvC,GAAG,CAACwC,IAAJ,CAAS;UAAChC,OAAO,EAAE;QAAV,CAAT,CAAP,CAHO,CAIP;QACA;MACH;;MACD,IAAIT,GAAG,CAACK,IAAJ,CAASiH,QAAT,KAAsBtH,GAAG,CAACK,IAAJ,CAASkH,eAAnC,EAAoD;QAChD,IAAMC,WAAW,GAAGC,kBAAA,CAAOC,QAAP,CAAgB1H,GAAG,CAACK,IAAJ,CAASiH,QAAzB,EAAmC,EAAnC,CAApB;;QACIjF,qBAAA,CAAKsF,iBAAL,CAAuBnF,IAAI,CAAC8C,GAA5B,EAAiC;UAAEgC,QAAQ,EAAEE,WAAZ;UAAyBpB,kBAAkB,EAAEwB,SAA7C;UAAwDvB,oBAAoB,EAAEuB;QAA9E,CAAjC,EAA4H,UAACxH,KAAD,EAAQa,IAAR,EAAiB;UACzI;UAEA,IAAIuF,eAAe,GAAGC,sBAAA,CAAWC,eAAX,CAA2B;YAC7CC,OAAO,EAAE,OADoC;YAE7CC,IAAI,EAAE;cACFpE,IAAI,EAAE,0BADJ;cAEFqE,IAAI,EAAE;YAFJ;UAFuC,CAA3B,CAAtB;;UAOA,IAAIC,WAAW,GAAG;YACdC,IAAI,EAAE,gCADQ;YAEdC,EAAE,EAAEhH,GAAG,CAACK,IAAJ,CAASQ,KAFC;YAGdoG,OAAO,EAAE,2BAHK;YAIdC,IAAI,EAAE,eAAe,4DAAf,GAA8E1E,IAAI,CAAC3B,KAAnF,GAA2F;UAJnF,CAAlB;UAOA2F,eAAe,CAACW,QAAhB,CAAyBL,WAAzB,EAAsC,UAASrF,GAAT,EAAcR,IAAd,EAAoB;YACtD;YACA,IAAGQ,GAAH,EAAQ;cACJ;cACA,OAAOxB,GAAG,CAACwC,IAAJ,CAAS;gBAACrC,KAAK,EAAE,IAAR;gBAAc0C,IAAI,EAAE,GAApB;gBAAyBrC,OAAO,EAAE;cAAlC,CAAT,CAAP;YACH,CAHD,MAGO;cACH;cACA,OAAOR,GAAG,CAACK,IAAJ,CAAS;gBAACF,KAAK,EAAE,KAAR;gBAAe0C,IAAI,EAAE,GAArB;gBAA0BvC,MAAM,EAAE,SAAlC;gBAA6CE,OAAO,EAAE;cAAtD,CAAT,CAAP;YACH;UACJ,CATD,EAjByI,CA8BzI;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACP,CA9CG;MA+CP,CAjDD,MAiDO;QACH;QACAR,GAAG,CAACwC,IAAJ,CAAS;UAACrC,KAAK,EAAE,IAAR;UAAcK,OAAO,EAAE;QAAvB,CAAT,EAFG,CAGH;MACH;IACJ,CA9DD;EA+DH,CAjEQ,CAAhB,WAmEa,UAAAgB,GAAG,EAAI;IACZS,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;IACAxB,GAAG,CAACwC,IAAJ,CAAS;MAAChB,GAAG,EAAHA;IAAD,CAAT;EACH,CAtEL;AAwEA,CA1EM;;;;AA6EA,IAAMoG,eAAe,GAAG,SAAlBA,eAAkB,CAAC7H,GAAD,EAAMC,GAAN,EAAc;EACzCiC,mBAAA,CAAQR,GAAR,CAAY,SAAZ,EAAuB1B,GAAG,CAACK,IAAJ,CAASyH,WAAhC;;EACA,IAAIA,WAAW,GAAG9H,GAAG,CAACK,IAAJ,CAASyH,WAA3B;;EACA,IAAIN,WAAW,GAAGC,kBAAA,CAAOC,QAAP,CAAgB1H,GAAG,CAACK,IAAJ,CAASmH,WAAzB,EAAsC,EAAtC,CAAlB;;EACA,IAAI3G,KAAK,GAAGb,GAAG,CAACK,IAAJ,CAASQ,KAArB,CAJyC,CAKzC;EACA;;EACAwB,qBAAA,CAAKjB,IAAL,CAAU;IAAEP,KAAK,EAAEA;EAAT,CAAV,EAA4B,UAACY,GAAD,EAAMe,IAAN,EAAe;IACvC;IACA,IAAI,CAACA,IAAL,EAAW;MACP,OAAOvC,GAAG,CAACwC,IAAJ,CAAS;QAAEK,IAAI,EAAE,GAAR;QAAa1C,KAAK,EAAE,IAApB;QAA0BK,OAAO,EAAE;MAAnC,CAAT,CAAP;IACH,CAFD,MAEO,IAAI+B,IAAJ,EAAU;MACb;MACA,IAAIiF,kBAAA,CAAOM,OAAP,CAAeD,WAAf,EAA4BtF,IAAI,CAAC,CAAD,CAAJ,CAAQ8E,QAApC,CAAJ,EAAmD;QAC/C;QACAjF,qBAAA,CAAKsF,iBAAL,CAAuBnF,IAAI,CAAC,CAAD,CAAJ,CAAQ8C,GAAR,CAAYW,QAAZ,EAAvB,EAA+C;UAAEqB,QAAQ,EAAEE;QAAZ,CAA/C,EAA0E,UAAC/F,GAAD,EAAMR,IAAN,EAAe;UACrF;UACA,IAAIQ,GAAJ,EAAS;YACL;YACA;YACCxB,GAAG,CAACwC,IAAJ,CAAS;cAAErC,KAAK,EAAE,IAAT;cAAeK,OAAO,EAAE;YAAxB,CAAT;UACJ,CAJD,MAIO;YACH;YACA;YACA,OAAOR,GAAG,CAACwC,IAAJ,CAAS;cAAErC,KAAK,EAAE,KAAT;cAAgBK,OAAO,EAAE;YAAzB,CAAT,CAAP;UAEH;QACJ,CAZD;MAaH;IACJ,CAlBM,MAkBA;MACH,OAAOR,GAAG,CAACwC,IAAJ,CAAS;QAAErC,KAAK,EAAE,IAAT;QAAeK,OAAO,EAAE;MAAxB,CAAT,CAAP;IACH;EACJ,CAzBD;AA0BH,CAjCM,C,CAmCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;AAEO,IAAMuH,cAAc;EAAA,0FAAG,kBAAOhI,GAAP,EAAYC,GAAZ;IAAA;MAAA;QAAA;UAAA;YAAA,MAErB,CAACD,GAAG,CAACK,IAAJ,CAAS4H,WAAX,IACA;YACC,CAACjI,GAAG,CAACK,IAAJ,CAAS6H,eAFX,IAGC,CAAClI,GAAG,CAACK,IAAJ,CAAS8H,QAHX,IAIC,CAACnI,GAAG,CAACK,IAAJ,CAAS+H,MAJX,IAKC,CAACpI,GAAG,CAACK,IAAJ,CAASgI,IALX,IAMC,CAACrI,GAAG,CAACK,IAAJ,CAASiI,OARW;cAAA;cAAA;YAAA;;YAAA,kCAUfrI,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;cAACrC,KAAK,EAAE,IAAR;cAAcK,OAAO,EAAE;YAAvB,CAArB,CAVe;;UAAA;YAa1B4B,qBAAA,CAAKC,QAAL,CAAc;cAACgD,GAAG,EAAEtF,GAAG,CAACK,IAAJ,CAASiI;YAAf,CAAd,EAAuC9G,IAAvC,CAA4C,UAACC,GAAD,EAAMe,IAAN,EAAe;cACvD,IAAIf,GAAJ,EAAS;gBACL;gBACA,OAAOxB,GAAG,CAACwC,IAAJ,CAAShB,GAAT,CAAP;cACH;;cACD,IAAI,CAACe,IAAL,EAAW;gBACP,OAAOvC,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;kBAACrC,KAAK,EAAE,IAAR;kBAAcK,OAAO,EAAE;gBAAvB,CAArB,CAAP;gBAAsE;cACzE;;cAED,IAAI+B,IAAI,CAACuC,IAAL,IAAa,cAAjB,EAAiC;gBAC7B,OAAO9E,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;kBAACrC,KAAK,EAAE,IAAR;kBAAcK,OAAO,EAAE;gBAAvB,CAArB,CAAP;cACH,CAFD,MAGK;gBACD,IAAI8H,UAAJ;;gBACAC,8BAAA,CAAMlG,QAAN,CAAe;kBAAEgD,GAAG,EAAEtF,GAAG,CAACK,IAAJ,CAAS6H;gBAAhB,CAAf,EAAkD1G,IAAlD,CAAuD,UAACC,GAAD,EAAMgH,IAAN,EAAe;kBAClEvG,mBAAA,CAAQR,GAAR,CAAY,cAAZ,EAA4B+G,IAA5B;;kBACA,IAAIhH,GAAJ,EAAS;oBACL;oBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;sBAACF,KAAK,EAAE,IAAR;sBAAcG,MAAM,EAAE,GAAtB;sBAA2BE,OAAO,EAAE;oBAApC,CAAT,CAAP;kBACH;;kBACD,IAAI,CAACgI,IAAL,EAAW;oBACP;oBACA,OAAOxI,GAAG,CAACK,IAAJ,CAAS;sBAACF,KAAK,EAAE,IAAR;sBAAcG,MAAM,EAAE,GAAtB;sBAA2BE,OAAO,EAAE;oBAApC,CAAT,CAAP;kBACH,CATiE,CAWlE;;;kBACA,IAAIT,GAAG,CAACK,IAAJ,CAASgI,IAAT,KAAkB,IAAtB,EAA4B;oBACxBE,UAAU,GAAG,aAAavI,GAAG,CAACK,IAAJ,CAAS+H,MAAnC;kBACH;;kBACD,IAAIpI,GAAG,CAACK,IAAJ,CAASgI,IAAT,KAAkB,GAAtB,EAA2B;oBAC3BE,UAAU,GAAG,eAAevI,GAAG,CAACK,IAAJ,CAAS+H,MAArC;kBACC,CAjBiE,CAkBlE;kBACA;;;kBACA,IAAMpD,KAAK,GAAGyD,IAAI,CAACC,KAAL,GAAaH,UAA3B;kBACA,IAAMhH,GAAG,GAAGoH,IAAI,CAACC,MAAL,GAAc3C,QAAd,CAAuB,EAAvB,EAA2B4C,KAA3B,CAAiC,CAAjC,CAAZ;kBACC,IAAInH,GAAG,GAAG,IAAIP,oBAAJ,CAAQ;oBACnB8G,WAAW,EAAEjI,GAAG,CAACK,IAAJ,CAAS4H,WADH;oBAEnB;oBACAS,KAAK,EAAED,IAAI,CAACC,KAHO;oBAInB1D,KAAK,EAAE2D,IAAI,CAACG,KAAL,CAAW9D,KAAX,CAJY;oBAKnBkD,eAAe,EAAElI,GAAG,CAACK,IAAJ,CAAS6H,eALP;oBAMnBC,QAAQ,EAAEnI,GAAG,CAACK,IAAJ,CAAS8H,QANA;oBAOnBC,MAAM,EAAEG,UAPW;oBAQnBF,IAAI,EAAErI,GAAG,CAACK,IAAJ,CAASgI,IARI;oBASnBU,WAAW,EAAE/I,GAAG,CAACK,IAAJ,CAAS+H,MATH;oBAUnBE,OAAO,EAAEtI,GAAG,CAACK,IAAJ,CAASiI,OAVC;oBAWnBjH,aAAa,EAAEE,GAXI;oBAYnByH,UAAU,EAAE1C,IAAI,CAACC,GAAL,EAZO;oBAanB0C,UAAU,EAAE3C,IAAI,CAACC,GAAL;kBAbO,CAAR,CAAV;kBAgBL7E,GAAG,CAACI,IAAJ,GACCd,IADD,CACM,UAAAC,IAAI,EAAI;oBACVhB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;sBAACoB,GAAG,EAAET,IAAN;sBAAYb,KAAK,EAAE,KAAnB;sBAA0BK,OAAO,EAAE;oBAAnC,CAArB;kBACH,CAHD,WAIO,UAAAgB,GAAG,EAAI;oBACVS,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;oBACAxB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;sBAACrC,KAAK,EAAE,IAAR;sBAAcK,OAAO,EAAE;oBAAvB,CAArB;kBACH,CAPD;gBAQH,CA9CG;cA+CH;YACJ,CA9DD;;UAb0B;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAduH,cAAc;IAAA;EAAA;AAAA,GAApB;;;;AA8EA,IAAMkB,uBAAuB;EAAA,0FAAG,kBAAOlJ,GAAP,EAAYC,GAAZ;IAAA;MAAA;QAAA;UAAA;YAAA,MAE9B,CAACD,GAAG,CAACK,IAAJ,CAAS4H,WAAX,IACA;YACC,CAACjI,GAAG,CAACK,IAAJ,CAAS6H,eAFX,IAGC,CAAClI,GAAG,CAACK,IAAJ,CAAS8H,QAHX,IAIC,CAACnI,GAAG,CAACK,IAAJ,CAAS+H,MAJX,IAKC,CAACpI,GAAG,CAACK,IAAJ,CAASgI,IALX,IAMC,CAACrI,GAAG,CAACK,IAAJ,CAASiI,OARoB,CAS/B;YAT+B;cAAA;cAAA;YAAA;;YAAA,kCAWpBrI,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;cAACrC,KAAK,EAAE,IAAR;cAAcK,OAAO,EAAE;YAAvB,CAArB,CAXoB;;UAAA;YAanCU,oBAAA,CAAImB,QAAJ,CAAatC,GAAG,CAACsB,MAAJ,CAAWiB,EAAxB,EAA4B,UAACd,GAAD,EAAMC,GAAN,EAAc;cACtC,IAAID,GAAJ,EAAS;gBACLS,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;cACH;;cACD,IAAI,CAACC,GAAL,EAAU;gBACN;gBACA,OAAOzB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;kBAACrC,KAAK,EAAE,IAAR;kBAAcK,OAAO,EAAE;gBAAvB,CAArB,CAAP;cACH;;cACD,IAAIiB,GAAG,CAAC4G,OAAJ,IAAetI,GAAG,CAACK,IAAJ,CAASiI,OAA5B,EAAqC;gBACjC;gBACA,OAAOrI,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;kBAACrC,KAAK,EAAE,IAAR;kBAAcK,OAAO,EAAE;gBAAvB,CAArB,CAAP;cACH;;cACD,IAAIiB,GAAG,CAACC,IAAJ,KAAa,IAAjB,EAAuB;gBACnB,OAAO1B,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;kBAACrC,KAAK,EAAE,IAAR;kBAAcK,OAAO,EAAE;gBAAvB,CAArB,CAAP;cACH,CAFD,MAGK;gBACD,IAAI8H,UAAJ;;gBACAC,8BAAA,CAAMlG,QAAN,CAAe;kBAAEgD,GAAG,EAAEtF,GAAG,CAACK,IAAJ,CAAS6H;gBAAhB,CAAf,EAAkD1G,IAAlD,CAAuD,UAACC,GAAD,EAAMgH,IAAN,EAAe;kBAClE,IAAIhH,GAAJ,EAAS;oBACLS,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;oBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;sBAACF,KAAK,EAAE,IAAR;sBAAcG,MAAM,EAAE,GAAtB;sBAA2BE,OAAO,EAAE;oBAApC,CAAT,CAAP;kBACH;;kBACD,IAAI,CAACgI,IAAL,EAAW;oBACPvG,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;oBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;sBAACF,KAAK,EAAE,IAAR;sBAAcG,MAAM,EAAE,GAAtB;sBAA2BE,OAAO,EAAE;oBAApC,CAAT,CAAP;kBACH,CARiE,CAUlE;;;kBACA,IAAIT,GAAG,CAACK,IAAJ,CAASgI,IAAT,KAAkB,IAAtB,EAA4B;oBACxBE,UAAU,GAAG,aAAavI,GAAG,CAACK,IAAJ,CAAS+H,MAAnC;kBACH;;kBACD,IAAIpI,GAAG,CAACK,IAAJ,CAASgI,IAAT,KAAkB,GAAtB,EAA2B;oBACvBE,UAAU,GAAG,eAAevI,GAAG,CAACK,IAAJ,CAAS+H,MAArC;kBACH;;kBACD,IAAMpD,KAAK,GAAGyD,IAAI,CAACC,KAAL,GAAa1I,GAAG,CAACK,IAAJ,CAAS+H,MAApC;kBAEA1G,GAAG,CAACuG,WAAJ,GAAkBjI,GAAG,CAACK,IAAJ,CAAS4H,WAA3B,EACA;kBACAvG,GAAG,CAACgH,KAAJ,GAAYD,IAAI,CAACC,KAFjB,EAGAhH,GAAG,CAACsD,KAAJ,GAAYA,KAHZ,EAIAtD,GAAG,CAACwG,eAAJ,GAAsBlI,GAAG,CAACK,IAAJ,CAAS6H,eAJ/B,EAKA;kBACAxG,GAAG,CAACyG,QAAJ,GAAenI,GAAG,CAACK,IAAJ,CAAS8H,QANxB,EAOAzG,GAAG,CAAC0G,MAAJ,GAAapI,GAAG,CAACK,IAAJ,CAAS+H,MAPtB,EAQA;kBACA;kBACA1G,GAAG,CAACuH,UAAJ,GAAiB3C,IAAI,CAACC,GAAL,EAVjB,CAnBkE,CA8BlE;;kBACA7E,GAAG,CAACI,IAAJ,GAAWd,IAAX,CAAgB,UAAAe,MAAM,EAAI;oBACtB9B,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;sBAACF,KAAK,EAAE,KAAR;sBAAeK,OAAO,EAAE;oBAAxB,CAArB,EADsB,CAEtB;oBACA;kBACH,CAJD,WAIS,UAAAgB,GAAG,EAAI;oBACZ;oBACAxB,GAAG,CAACwC,IAAJ,CAAS;sBAAErC,KAAK,EAAE,IAAT;sBAAeK,OAAO,EAAE;oBAAxB,CAAT;kBACP,CAPG;gBAQP,CAvCG;cAwCH;YAEJ,CA3DD;;UAbmC;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAvByI,uBAAuB;IAAA;EAAA;AAAA,GAA7B;;;;AA2EA,IAAMC,gCAAgC;EAAA,0FAAG,kBAAOnJ,GAAP,EAAYC,GAAZ;IAAA;IAAA;MAAA;QAAA;UAAA;YACtCsE,IADsC,GAC/BC,QAAQ,CAACxE,GAAG,CAACyE,KAAJ,CAAUF,IAAX,CADuB;YAEtCG,KAFsC,GAE9BF,QAAQ,CAACxE,GAAG,CAACyE,KAAJ,CAAUC,KAAX,CAFsB;YAGtCC,UAHsC,GAGzB,CAACJ,IAAI,GAAG,CAAR,IAAaG,KAHY;YAItCE,QAJsC,GAI3BL,IAAI,GAAGG,KAJoB;YAKtCG,OALsC,GAK5B,EAL4B;YAAA;YAAA,OAOP1D,oBAAA,CAAI2D,cAAJ,CAAmB;cAACwD,OAAO,EAAEtI,GAAG,CAACsB,MAAJ,CAAWiB;YAArB,CAAnB,EAA6Cf,IAA7C,EAPO;;UAAA;YAOtC4H,sBAPsC;YAAA;YAAA,OAQZjI,oBAAA,CAAI2D,cAAJ,CAAmB;cAACwD,OAAO,EAAEtI,GAAG,CAACsB,MAAJ,CAAWiB,EAArB;cAAyBZ,IAAI,EAAE;YAA/B,CAAnB,EAAyDH,IAAzD,EARY;;UAAA;YAQtC6H,iBARsC;YAAA,eAUxCzE,QAVwC;YAAA;YAAA,OAUtBzD,oBAAA,CAAI2D,cAAJ,GAAqBtD,IAArB,EAVsB;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAWxCqD,OAAO,CAACZ,IAAR,GAAe;cACXM,IAAI,EAAEA,IAAI,GAAG,CADF;cAEXG,KAAK,EAAEA;YAFI,CAAf;;UAXwC;YAiB5C,IAAIC,UAAU,GAAG,CAAjB,EAAoB;cAChBE,OAAO,CAACI,QAAR,GAAmB;gBACfV,IAAI,EAAEA,IAAI,GAAG,CADE;gBAEfG,KAAK,EAAEA;cAFQ,CAAnB;YAIH;;YACDvD,oBAAA,CAAIC,IAAJ,CAAS;cAACkH,OAAO,EAAEtI,GAAG,CAACsB,MAAJ,CAAWiB;YAArB,CAAT,EAAmC+G,QAAnC,CAA4C,aAA5C,EAA2DA,QAA3D,CAAoE,iBAApE,EAAuFpE,IAAvF,CAA4F,aAA5F,EAA2GR,KAA3G,CAAiHA,KAAjH,EAAwHS,IAAxH,CAA6HR,UAA7H,EAAyInD,IAAzI,CAA8I,UAACC,GAAD,EAAM8H,SAAN,EAAiBtF,IAAjB,EAA0B;cACpK,IAAIxC,GAAJ,EAAS;gBACL;gBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cACD,IAAI,CAAC8I,SAAL,EAAgB;gBACZ;gBACA,OAAOtJ,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cACD,IAAM+I,UAAU,GAAGD,SAAS,CAACE,MAAV,CAAiB,UAAUC,aAAV,EAAyBC,YAAzB,EAAuC;gBACvE,OAAOD,aAAa,GAAGC,YAAY,CAACvB,MAApC;cACH,CAFkB,EAEhB,CAFgB,CAAnB;cAIA,IAAMwB,KAAK,GAAGL,SAAS,CAACM,MAAV,CAAiB,UAAA9H,MAAM;gBAAA,OAAIA,MAAM,CAACJ,IAAP,KAAgB,IAApB;cAAA,CAAvB,CAAd;cAEA,IAAMmI,kBAAkB,GAAGF,KAAK,CAACH,MAAN,CAAa,UAAUC,aAAV,EAAyBC,YAAzB,EAAuC;gBAC3E,OAAOD,aAAa,GAAGC,YAAY,CAAC3E,KAApC;cACH,CAF0B,EAExB,CAFwB,CAA3B;cAIA,IAAM+E,MAAM,GAAGR,SAAS,CAACM,MAAV,CAAiB,UAAA9H,MAAM;gBAAA,OAAIA,MAAM,CAACJ,IAAP,KAAgB,KAApB;cAAA,CAAvB,CAAf;cAEA,IAAMqI,YAAY,GAAGD,MAAM,CAACN,MAAP,CAAc,UAAUC,aAAV,EAAyBC,YAAzB,EAAuC;gBACtE,OAAOD,aAAa,GAAGC,YAAY,CAAC3E,KAApC;cACH,CAFoB,EAElB,CAFkB,CAArB,CArBoK,CAyBpK;;cACA,IAAMiF,gBAAgB,GAAGb,sBAAsB,GAAGC,iBAAlD;cAEA,OAAOpJ,GAAG,CAACK,IAAJ,CAAS;gBAACF,KAAK,EAAE,KAAR;gBAAeG,MAAM,EAAE,GAAvB;gBAA4B2J,2BAA2B,EAAEb,iBAAzD;gBAA4Ec,iBAAiB,EAAEF,gBAA/F;gBAAiHH,kBAAkB,EAAEA,kBAArI;gBAAyJM,cAAc,EAAEJ,YAAzK;gBAAuLK,sBAAsB,EAAEjB,sBAA/M;gBAAuOkB,mBAAmB,EAAEd,UAA5P;gBAAwQpE,UAAU,EAAEP,OAApR;gBAA6RnD,GAAG,EAAE6H,SAAlS;gBAA6S9I,OAAO,EAAE;cAAtT,CAAT,CAAP;YACH,CA7BD;;UAvB4C;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAhC0I,gCAAgC;IAAA;EAAA;AAAA,GAAtC;;;;AAuDA,IAAMoB,4CAA4C;EAAA,0FAAG,kBAAOvK,GAAP,EAAYC,GAAZ;IAAA;IAAA;MAAA;QAAA;UAAA;YAClDsE,IADkD,GAC3CC,QAAQ,CAACxE,GAAG,CAACyE,KAAJ,CAAUF,IAAX,CADmC;YAElDG,KAFkD,GAE1CF,QAAQ,CAACxE,GAAG,CAACyE,KAAJ,CAAUC,KAAX,CAFkC;YAGlDC,UAHkD,GAGrC,CAACJ,IAAI,GAAG,CAAR,IAAaG,KAHwB;YAIlDE,QAJkD,GAIvCL,IAAI,GAAGG,KAJgC;YAKlDG,OALkD,GAKxC,EALwC;YAAA;YAAA,OAOnB1D,oBAAA,CAAI2D,cAAJ,CAAmB;cAACwD,OAAO,EAAEtI,GAAG,CAACsB,MAAJ,CAAWiB,EAArB;cAAyBZ,IAAI,EAAE3B,GAAG,CAACyE,KAAJ,CAAU9C;YAAzC,CAAnB,EAAmEH,IAAnE,EAPmB;;UAAA;YAOlD4H,sBAPkD;YAAA,eAUpDxE,QAVoD;YAAA;YAAA,OAUlCzD,oBAAA,CAAI2D,cAAJ,GAAqBtD,IAArB,EAVkC;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAWpDqD,OAAO,CAACZ,IAAR,GAAe;cACXM,IAAI,EAAEA,IAAI,GAAG,CADF;cAEXG,KAAK,EAAEA;YAFI,CAAf;;UAXoD;YAiBxD,IAAIC,UAAU,GAAG,CAAjB,EAAoB;cAChBE,OAAO,CAACI,QAAR,GAAmB;gBACfV,IAAI,EAAEA,IAAI,GAAG,CADE;gBAEfG,KAAK,EAAEA;cAFQ,CAAnB;YAIH;;YACDvD,oBAAA,CAAIC,IAAJ,CAAS;cAACkH,OAAO,EAAEtI,GAAG,CAACsB,MAAJ,CAAWiB,EAArB;cAAyBZ,IAAI,EAAE3B,GAAG,CAACyE,KAAJ,CAAU9C;YAAzC,CAAT,EAAyD2H,QAAzD,CAAkE,aAAlE,EAAiFA,QAAjF,CAA0F,iBAA1F,EAA6GpE,IAA7G,CAAkH,aAAlH,EAAiIR,KAAjI,CAAuIA,KAAvI,EAA8IS,IAA9I,CAAmJR,UAAnJ,EAA+JnD,IAA/J,CAAoK,UAACC,GAAD,EAAM8H,SAAN,EAAiBtF,IAAjB,EAA0B;cAC1L,IAAIxC,GAAJ,EAAS;gBACL;gBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cACD,IAAI,CAAC8I,SAAL,EAAgB;gBACZ;gBACA,OAAOtJ,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cAED,OAAOR,GAAG,CAACK,IAAJ,CAAS;gBAACF,KAAK,EAAE,KAAR;gBAAeG,MAAM,EAAE,GAAvB;gBAA4B8J,sBAAsB,EAAEjB,sBAApD;gBAA4EhE,UAAU,EAAEP,OAAxF;gBAAiGnD,GAAG,EAAE6H,SAAtG;gBAAiH9I,OAAO,EAAE;cAA1H,CAAT,CAAP;YACH,CAXD;;UAvBwD;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAA5C8J,4CAA4C;IAAA;EAAA;AAAA,GAAlD;;;;AAqCA,IAAMC,sCAAsC;EAAA,0FAAG,kBAAOxK,GAAP,EAAYC,GAAZ;IAAA;IAAA;MAAA;QAAA;UAAA;YAC5CsE,IAD4C,GACrCC,QAAQ,CAACxE,GAAG,CAACyE,KAAJ,CAAUF,IAAX,CAD6B;YAE5CG,KAF4C,GAEpCF,QAAQ,CAACxE,GAAG,CAACyE,KAAJ,CAAUC,KAAX,CAF4B;YAG5CC,UAH4C,GAG/B,CAACJ,IAAI,GAAG,CAAR,IAAaG,KAHkB;YAI5CE,QAJ4C,GAIjCL,IAAI,GAAGG,KAJ0B;YAK5CG,OAL4C,GAKlC,EALkC,EAOlD;YACA;;YARkD,eAU9CD,QAV8C;YAAA;YAAA,OAU5BzD,oBAAA,CAAI2D,cAAJ,GAAqBtD,IAArB,EAV4B;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAW9CqD,OAAO,CAACZ,IAAR,GAAe;cACXM,IAAI,EAAEA,IAAI,GAAG,CADF;cAEXG,KAAK,EAAEA;YAFI,CAAf;;UAX8C;YAiBlD,IAAIC,UAAU,GAAG,CAAjB,EAAoB;cAChBE,OAAO,CAACI,QAAR,GAAmB;gBACfV,IAAI,EAAEA,IAAI,GAAG,CADE;gBAEfG,KAAK,EAAEA;cAFQ,CAAnB;YAIH;;YACDvD,oBAAA,CAAIC,IAAJ,CAAS;cAACkH,OAAO,EAAEtI,GAAG,CAACsB,MAAJ,CAAWiB;YAArB,CAAT,EAAmC+G,QAAnC,CAA4C,aAA5C,EAA2DA,QAA3D,CAAoE,iBAApE,EAAuFpE,IAAvF,CAA4F,aAA5F,EAA2GR,KAA3G,CAAiHA,KAAjH,EAAwHS,IAAxH,CAA6HR,UAA7H,EAAyInD,IAAzI,CAA8I,UAACC,GAAD,EAAM8H,SAAN,EAAiBtF,IAAjB,EAA0B;cACpK,IAAIxC,GAAJ,EAAS;gBACL;gBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cACD,IAAI,CAAC8I,SAAL,EAAgB;gBACZ,OAAOtJ,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cACD,IAAM+I,UAAU,GAAGD,SAAS,CAACE,MAAV,CAAiB,UAAUC,aAAV,EAAyBC,YAAzB,EAAuC;gBACvE,OAAOD,aAAa,GAAGC,YAAY,CAACvB,MAApC;cACH,CAFkB,EAEhB,CAFgB,CAAnB;cAIA,IAAMwB,KAAK,GAAGL,SAAS,CAACM,MAAV,CAAiB,UAAA9H,MAAM;gBAAA,OAAIA,MAAM,CAACJ,IAAP,KAAgB,IAApB;cAAA,CAAvB,CAAd;cAEA,IAAMmI,kBAAkB,GAAGF,KAAK,CAACH,MAAN,CAAa,UAAUC,aAAV,EAAyBC,YAAzB,EAAuC;gBAC3E,OAAOD,aAAa,GAAGC,YAAY,CAAC3E,KAApC;cACH,CAF0B,EAExB,CAFwB,CAA3B;cAIA,IAAM+E,MAAM,GAAGR,SAAS,CAACM,MAAV,CAAiB,UAAA9H,MAAM;gBAAA,OAAIA,MAAM,CAACJ,IAAP,KAAgB,KAApB;cAAA,CAAvB,CAAf;cAEA,IAAMqI,YAAY,GAAGD,MAAM,CAACN,MAAP,CAAc,UAAUC,aAAV,EAAyBC,YAAzB,EAAuC;gBACtE,OAAOD,aAAa,GAAGC,YAAY,CAAC3E,KAApC;cACH,CAFoB,EAElB,CAFkB,CAArB,CApBoK,CAwBpK;;cACA,IAAMiF,gBAAgB,GAAGb,sBAAsB,GAAGC,iBAAlD;cAEA,OAAOpJ,GAAG,CAACK,IAAJ,CAAS;gBAACF,KAAK,EAAE,KAAR;gBAAeG,MAAM,EAAE,GAAvB;gBAA4B2J,2BAA2B,EAAEb,iBAAzD;gBAA4Ec,iBAAiB,EAAEF,gBAA/F;gBAAiHH,kBAAkB,EAAEA,kBAArI;gBAAyJM,cAAc,EAAEJ,YAAzK;gBAAuLK,sBAAsB,EAAEjB,sBAA/M;gBAAuOkB,mBAAmB,EAAEd,UAA5P;gBAAwQpE,UAAU,EAAEP,OAApR;gBAA6RnD,GAAG,EAAE6H,SAAlS;gBAA6S9I,OAAO,EAAE;cAAtT,CAAT,CAAP;YACH,CA5BD;;UAvBkD;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAtC+J,sCAAsC;IAAA;EAAA;AAAA,GAA5C;;;;AAuDA,IAAMC,2BAA2B;EAAA,2FAAG,mBAAOzK,GAAP,EAAYC,GAAZ;IAAA;IAAA;MAAA;QAAA;UAAA;YACjCsE,IADiC,GAC1BC,QAAQ,CAACxE,GAAG,CAACyE,KAAJ,CAAUF,IAAX,CADkB;YAEjCG,KAFiC,GAEzBF,QAAQ,CAACxE,GAAG,CAACyE,KAAJ,CAAUC,KAAX,CAFiB;YAGjCC,UAHiC,GAGpB,CAACJ,IAAI,GAAG,CAAR,IAAaG,KAHO;YAIjCE,QAJiC,GAItBL,IAAI,GAAGG,KAJe;YAKjCG,OALiC,GAKvB,EALuB;YAAA;YAAA,OAMf1D,oBAAA,CAAI2D,cAAJ,GAAqBtD,IAArB,EANe;;UAAA;YAMjCkJ,SANiC;YAAA,gBAOnC9F,QAPmC;YAAA;YAAA,OAOjBzD,oBAAA,CAAI2D,cAAJ,GAAqBtD,IAArB,EAPiB;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAQnCqD,OAAO,CAACZ,IAAR,GAAe;cACXM,IAAI,EAAEA,IAAI,GAAG,CADF;cAEXG,KAAK,EAAEA;YAFI,CAAf;;UARmC;YAcvC,IAAIC,UAAU,GAAG,CAAjB,EAAoB;cAChBE,OAAO,CAACI,QAAR,GAAmB;gBACfV,IAAI,EAAEA,IAAI,GAAG,CADE;gBAEfG,KAAK,EAAEA;cAFQ,CAAnB;YAIH;;YACDvD,oBAAA,CAAIC,IAAJ,CAAS,EAAT,EAAa8D,IAAb,CAAkB,aAAlB,EAAiCoE,QAAjC,CAA0C,aAA1C,EAAyDA,QAAzD,CAAkE,iBAAlE,EAAqF5E,KAArF,CAA2FA,KAA3F,EAAkGS,IAAlG,CAAuGR,UAAvG,EAAmHnD,IAAnH,CAAwH,UAACC,GAAD,EAAM8H,SAAN,EAAiBtF,IAAjB,EAA0B;cAC9I,IAAIxC,GAAJ,EAAS;gBACLS,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;gBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH,CAJ6I,CAK9I;;;cACA,OAAOR,GAAG,CAACK,IAAJ,CAAS;gBAACF,KAAK,EAAE,KAAR;gBAAeG,MAAM,EAAE,GAAvB;gBAA4B6E,UAAU,EAAEP,OAAxC;gBAAiDnD,GAAG,EAAE6H,SAAtD;gBAAiEvE,KAAK,EAAE0F,SAAxE;gBAAoFjK,OAAO,EAAE;cAA7F,CAAT,CAAP;YACH,CAPD;;UApBuC;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAA3BgK,2BAA2B;IAAA;EAAA;AAAA,GAAjC;;;;AAgCA,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAC3K,GAAD,EAAMC,GAAN,EAAc;EAC9CkB,oBAAA,CAAIyJ,iBAAJ,CAAsB;IAAEtF,GAAG,EAAEtF,GAAG,CAACsB,MAAJ,CAAWiB;EAAlB,CAAtB,EAA8C,UAACd,GAAD,EAAMC,GAAN,EAAc;IACxD,IAAID,GAAJ,EAAS;MACL,OAAOxB,GAAG,CAACK,IAAJ,CAAS;QAACF,KAAK,EAAE,IAAR;QAAcG,MAAM,EAAE,GAAtB;QAA2BE,OAAO,EAAE;MAApC,CAAT,CAAP,CADK,CAEL;IACH;;IACD,IAAI,CAACiB,GAAL,EAAU;MACN,OAAOzB,GAAG,CAACK,IAAJ,CAAS;QAACF,KAAK,EAAE,IAAR;QAAcG,MAAM,EAAE,GAAtB;QAA2BE,OAAO,EAAE;MAApC,CAAT,CAAP,CADM,CAEN;IACH;;IACD,IAAIiB,GAAG,CAACC,IAAJ,KAAa,IAAjB,EAAuB;MACnB,OAAO1B,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;QAACrC,KAAK,EAAE,IAAR;QAAcK,OAAO,EAAE;MAAvB,CAArB,CAAP;IACH,CAFD,MAGK;MACD,OAAOR,GAAG,CAACK,IAAJ,CAAS;QAACF,KAAK,EAAE,KAAR;QAAeG,MAAM,EAAE,GAAvB;QAA4BE,OAAO,EAAE;MAArC,CAAT,CAAP,CADC,CAED;IACH;EACJ,CAhBD;AAiBH,CAlBM;;;AAqBA,IAAMoK,eAAe,IAAIxL,MAAM,CAACyL,MAAP,CAAc,KAAd;EAAA,2FAAsB,mBAAO9K,GAAP,EAAYC,GAAZ,EAAiBgE,IAAjB;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAG5C,IAAA8G,qBAAA,IAAMC,QAAN,CAAehL,GAAG,CAACiL,IAAJ,CAASC,IAAxB,EAA8BlK,IAA9B,CAAmC,UAACmK,OAAD,EAAW;cAChD;cACA,IAAIC,IAAI,GAAG,EAAX;;cACA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAACF,OAAO,CAACG,MAAxB,EAA+BD,CAAC,EAAhC,EAAmC;gBAC/B,IAAIE,GAAG,GAAC,EAAR;gBACAA,GAAG,CAACC,SAAJ,GAAgBL,OAAO,CAACE,CAAD,CAAP,CAAW,YAAX,CAAhB;gBACAE,GAAG,CAACE,QAAJ,GAAeN,OAAO,CAACE,CAAD,CAAP,CAAW,WAAX,CAAf;gBACAE,GAAG,CAACG,KAAJ,GAAYP,OAAO,CAACE,CAAD,CAAP,CAAW,OAAX,CAAZ;gBAEAE,GAAG,CAACG,KAAJ,GAAYP,OAAO,CAACE,CAAD,CAAP,CAAW,OAAX,CAAZ;gBAEAE,GAAG,CAACtD,WAAJ,GAAkBkD,OAAO,CAACE,CAAD,CAAP,CAAW,aAAX,CAAlB,EACAE,GAAG,CAACI,aAAJ,GAAoBR,OAAO,CAACE,CAAD,CAAP,CAAW,eAAX,CADpB,EAEA;gBACA;gBACAE,GAAG,CAACrD,eAAJ,GAAsBiD,OAAO,CAACE,CAAD,CAAP,CAAW,iBAAX,CAJtB,EAKAE,GAAG,CAACK,iBAAJ,GAAuBT,OAAO,CAACE,CAAD,CAAP,CAAW,mBAAX,CALvB,EAMAE,GAAG,CAACpD,QAAJ,GAAegD,OAAO,CAACE,CAAD,CAAP,CAAW,UAAX,CANf,EAOAE,GAAG,CAACnD,MAAJ,GAAa+C,OAAO,CAACE,CAAD,CAAP,CAAW,QAAX,CAPb,EAQAE,GAAG,CAACjD,OAAJ,GAAc6C,OAAO,CAACE,CAAD,CAAP,CAAW,SAAX,CARd,EASAE,GAAG,CAAClK,aAAJ,GAAoB8J,OAAO,CAACE,CAAD,CAAP,CAAW,eAAX,CATpB,EAUA;gBACA;gBAGAD,IAAI,CAACS,IAAL,CAAUN,GAAV,CAdA;cAeH;;cACDrJ,mBAAA,CAAQR,GAAR,CAAY,YAAZ,EAA0B0J,IAA1B;;cACAjK,oBAAA,CAAI2K,UAAJ,CAAeV,IAAf,EAAqBpK,IAArB,CAA0B,YAAM;gBAC5Bf,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;kBACjBhC,OAAO,EAAE;gBADQ,CAArB;cAGH,CAJD,WAIS,UAACL,KAAD,EAAW;gBAChBH,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;kBACjBhC,OAAO,EAAE,SADQ;kBAEjBL,KAAK,EAALA;gBAFiB,CAArB;cAIH,CATD;YAUH,CAtCK,WAsCG,UAACA,KAAD,EAAW;cAChBH,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;gBACjBhC,OAAO,EAAE,SADQ;gBAEjBL,KAAK,EAAEA;cAFU,CAArB;YAIH,CA3CK,CAH4C;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAtB;;EAAA;IAAA;EAAA;AAAA,GAAJ,CAArB;;AAmDA,IAAM2L,gBAAgB,IAAI1M,MAAM,CAACyL,MAAP,CAAc,MAAd;EAAA,2FAAuB,mBAAO9K,GAAP,EAAYC,GAAZ,EAAiBgE,IAAjB;IAAA;IAAA;MAAA;QAAA;UAAA;YACpD/B,mBAAA,CAAQR,GAAR,CAAY,YAAZ,EAA0B1B,GAAG,CAACK,IAA9B;;YADoD,IAE/CL,GAAG,CAACgM,KAF2C;cAAA;cAAA;YAAA;;YAAA,mCAGzC/L,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB,yBAArB,CAHyC;;UAAA;YAKhDwJ,UALgD,GAKnCjM,GAAG,CAACgM,KAAJ,CAAUf,IALyB;YAOhDiB,OAPgD,GAOtC,EAPsC;YASpD,IAAAC,qBAAA,EAAU;cACNC,QAAQ,EAAC,IADH;cAENC,MAAM,EAAE;YAFF,CAAV,EAICC,UAJD,CAIYtM,GAAG,CAACK,IAJhB,EAKCW,IALD,CAKM,UAACuL,MAAD,EAAU;cACZrK,mBAAA,CAAQR,GAAR,CAAY,iBAAZ,EAA+B6K,MAA/B,EADY,CAC2B;;YAC1C,CAPD,EAToD,CAkBpD;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;;UA9BoD;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAvB;;EAAA;IAAA;EAAA;AAAA,GAAJ,CAAtB;;;AAoCA,IAAMC,gBAAgB;EAAA,2FAAG,mBAAOxM,GAAP,EAAYC,GAAZ,EAAiBgE,IAAjB;IAAA;IAAA;MAAA;QAAA;UAAA;YAC5B/B,mBAAA,CAAQR,GAAR,CAAY,YAAZ,EAA0B1B,GAAG,CAACiL,IAA9B,EAD4B,CAG5B;;;YAH4B,IAIvBjL,GAAG,CAACgM,KAJmB;cAAA;cAAA;YAAA;;YAAA,mCAKjB/L,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB,yBAArB,CALiB;;UAAA;YAOxBwJ,UAPwB,GAOXjM,GAAG,CAACgM,KAAJ,CAAUf,IAPC;YASxBiB,OATwB,GASd,EATc;;YAW5BnB,qBAAA,CACEuB,UADF,CACaL,UAAU,CAAChL,IAAX,CAAgBgF,QAAhB,EADb,EACyC;cACpCwG,OAAO,EAAE,IAD2B;cAEpCC,WAAW,EAAE;YAFuB,CADzC,EAKEC,EALF,CAKK,MALL,EAKa,UAAS1L,IAAT,EAAc;cACtBA,IAAI,CAAC,KAAD,CAAJ,GAAc,IAAI2L,QAAQ,CAACpE,KAAT,CAAeqE,QAAnB,EAAd;cAEAX,OAAO,CAACL,IAAR,CAAa5K,IAAb;YACH,CATF,EAUE0L,EAVF,CAUK,KAVL,EAUY,YAAU;cACjBG,OAAO,CAACC,MAAR,CAAeb,OAAf,EAAwB,UAASzK,GAAT,EAAcuL,SAAd,EAAyB;gBAC9C,IAAIvL,GAAJ,EAAS,MAAMA,GAAN;cACX,CAFD;cAIAxB,GAAG,CAACwC,IAAJ,CAASyJ,OAAO,CAACZ,MAAR,GAAiB,2CAA1B;YACH,CAhBF;;UAX4B;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAhBkB,gBAAgB;IAAA;EAAA;AAAA,GAAtB;;;;AA+BA,IAAMS,eAAe;EAAA,2FAAG,mBAAOjN,GAAP,EAAYC,GAAZ;IAAA;MAAA;QAAA;UAAA;YAAA,MAEtB,CAACD,GAAG,CAACK,IAAJ,CAAS4H,WAAX,IACA;YACC,CAACjI,GAAG,CAACK,IAAJ,CAAS6H,eAFX,IAGC,CAAClI,GAAG,CAACK,IAAJ,CAAS8H,QAHX,IAIC,CAACnI,GAAG,CAACK,IAAJ,CAAS+H,MAJX,IAKC,CAACpI,GAAG,CAACK,IAAJ,CAASgI,IALX,IAMC,CAACrI,GAAG,CAACK,IAAJ,CAASiI,OARY;cAAA;cAAA;YAAA;;YAAA,mCAUhBrI,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;cAACrC,KAAK,EAAE,IAAR;cAAcK,OAAO,EAAE;YAAvB,CAArB,CAVgB;;UAAA;YAa3B4B,qBAAA,CAAKC,QAAL,CAAc;cAACgD,GAAG,EAAEtF,GAAG,CAACK,IAAJ,CAASiI;YAAf,CAAd,EAAuC9G,IAAvC,CAA4C,UAACC,GAAD,EAAMe,IAAN,EAAe;cACvD,IAAIf,GAAJ,EAAS;gBACL;gBACA,OAAOxB,GAAG,CAACwC,IAAJ,CAAShB,GAAT,CAAP;cACH;;cACD,IAAI,CAACe,IAAL,EAAW;gBACP,OAAOvC,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;kBAACrC,KAAK,EAAE,IAAR;kBAAcK,OAAO,EAAE;gBAAvB,CAArB,CAAP;gBAAsE;cACzE;;cAED,IAAI+B,IAAI,CAACuC,IAAL,IAAa,cAAjB,EAAiC;gBAC7B,OAAO9E,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;kBAACrC,KAAK,EAAE,IAAR;kBAAcK,OAAO,EAAE;gBAAvB,CAArB,CAAP;cACH,CAFD,MAGK;gBACD,IAAI8H,UAAJ;;gBACAC,8BAAA,CAAMlG,QAAN,CAAe;kBAAEgD,GAAG,EAAEtF,GAAG,CAACK,IAAJ,CAAS6H;gBAAhB,CAAf,EAAkD1G,IAAlD,CAAuD,UAACC,GAAD,EAAMgH,IAAN,EAAe;kBAClEvG,mBAAA,CAAQR,GAAR,CAAY,cAAZ,EAA4B+G,IAA5B;;kBACA,IAAIhH,GAAJ,EAAS;oBACL;oBACA,OAAOxB,GAAG,CAACK,IAAJ,CAAS;sBAACF,KAAK,EAAE,IAAR;sBAAcG,MAAM,EAAE,GAAtB;sBAA2BE,OAAO,EAAE;oBAApC,CAAT,CAAP;kBACH;;kBACD,IAAI,CAACgI,IAAL,EAAW;oBACP;oBACA,OAAOxI,GAAG,CAACK,IAAJ,CAAS;sBAACF,KAAK,EAAE,IAAR;sBAAcG,MAAM,EAAE,GAAtB;sBAA2BE,OAAO,EAAE;oBAApC,CAAT,CAAP;kBACH,CATiE,CAWlE;;;kBACA,IAAIT,GAAG,CAACK,IAAJ,CAASgI,IAAT,KAAkB,IAAtB,EAA4B;oBACxBE,UAAU,GAAG,aAAavI,GAAG,CAACK,IAAJ,CAAS+H,MAAnC;kBACH;;kBACD,IAAIpI,GAAG,CAACK,IAAJ,CAASgI,IAAT,KAAkB,GAAtB,EAA2B;oBAC3BE,UAAU,GAAG,eAAevI,GAAG,CAACK,IAAJ,CAAS+H,MAArC;kBACC,CAjBiE,CAkBlE;kBACA;;;kBACA,IAAMpD,KAAK,GAAGyD,IAAI,CAACC,KAAL,GAAaH,UAA3B;kBACA,IAAMhH,GAAG,GAAGoH,IAAI,CAACC,MAAL,GAAc3C,QAAd,CAAuB,EAAvB,EAA2B4C,KAA3B,CAAiC,CAAjC,CAAZ;kBACC,IAAInH,GAAG,GAAG,IAAIP,oBAAJ,CAAQ;oBACnB8G,WAAW,EAAEjI,GAAG,CAACK,IAAJ,CAAS4H,WADH;oBAEnB;oBACAS,KAAK,EAAED,IAAI,CAACC,KAHO;oBAInB1D,KAAK,EAAE2D,IAAI,CAACG,KAAL,CAAW9D,KAAX,CAJY;oBAKnBkD,eAAe,EAAElI,GAAG,CAACK,IAAJ,CAAS6H,eALP;oBAMnBC,QAAQ,EAAEnI,GAAG,CAACK,IAAJ,CAAS8H,QANA;oBAOnBC,MAAM,EAAEG,UAPW;oBAQnBF,IAAI,EAAErI,GAAG,CAACK,IAAJ,CAASgI,IARI;oBASnBU,WAAW,EAAE/I,GAAG,CAACK,IAAJ,CAAS+H,MATH;oBAUnBE,OAAO,EAAEtI,GAAG,CAACK,IAAJ,CAASiI,OAVC;oBAWnBjH,aAAa,EAAEE,GAXI;oBAYnByH,UAAU,EAAE1C,IAAI,CAACC,GAAL,EAZO;oBAanB0C,UAAU,EAAE3C,IAAI,CAACC,GAAL;kBAbO,CAAR,CAAV;kBAgBL7E,GAAG,CAACI,IAAJ,GACCd,IADD,CACM,UAAAC,IAAI,EAAI;oBACVhB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;sBAACoB,GAAG,EAAET,IAAN;sBAAYb,KAAK,EAAE,KAAnB;sBAA0BK,OAAO,EAAE;oBAAnC,CAArB;kBACH,CAHD,WAIO,UAAAgB,GAAG,EAAI;oBACVS,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;oBACAxB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;sBAACrC,KAAK,EAAE,IAAR;sBAAcK,OAAO,EAAE;oBAAvB,CAArB;kBACH,CAPD;gBAQH,CA9CG;cA+CH;YACJ,CA9DD;;UAb2B;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAfwM,eAAe;IAAA;EAAA;AAAA,GAArB;;;;AA8EA,IAAMC,oBAAoB;EAAA,2FAAG,mBAAOlN,GAAP,EAAYC,GAAZ;IAAA;MAAA;QAAA;UAAA;YAChCoC,qBAAA,CAAKC,QAAL,CAAc;cAAEgD,GAAG,EAAEtF,GAAG,CAACK,IAAJ,CAASiI,OAAhB;cAAyBvD,IAAI,EAAE;YAA/B,CAAd,EAA+DvD,IAA/D,CAAoE,UAACC,GAAD,EAAMe,IAAN,EAAe;cAC/E,IACK,CAACxC,GAAG,CAACK,IAAJ,CAAS4H,WAAX,IACC,CAACjI,GAAG,CAACK,IAAJ,CAAS2E,KADX,IAEC,CAAChF,GAAG,CAACK,IAAJ,CAASqI,KAFX,IAGC,CAAC1I,GAAG,CAACK,IAAJ,CAAS6H,eAHX,IAIC,CAAClI,GAAG,CAACK,IAAJ,CAAS0I,WAJX,IAKC,CAAC/I,GAAG,CAACK,IAAJ,CAAS8H,QALX,IAMC,CAACnI,GAAG,CAACK,IAAJ,CAAS+H,MANX,IAOC,CAACpI,GAAG,CAACK,IAAJ,CAASgI,IAPX,IAQC,CAACrI,GAAG,CAACK,IAAJ,CAASiI,OATf,EAUM;gBACF,OAAOrI,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;kBAACrC,KAAK,EAAE,IAAR;kBAAcK,OAAO,EAAE;gBAAvB,CAArB,CAAP;cACH;;cACD,IAAIgB,GAAJ,EAAS;gBACL,OAAOxB,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cACD,IAAI,CAAC+B,IAAL,EAAW;gBACP,OAAOvC,GAAG,CAACK,IAAJ,CAAS;kBAACF,KAAK,EAAE,IAAR;kBAAcG,MAAM,EAAE,GAAtB;kBAA2BE,OAAO,EAAE;gBAApC,CAAT,CAAP;cACH;;cACD,IAAIiB,GAAG,GAAG,IAAIP,oBAAJ,CAAQ;gBACd8G,WAAW,EAAEjI,GAAG,CAACK,IAAJ,CAAS4H,WADR;gBAEd;gBACAS,KAAK,EAAE1I,GAAG,CAACK,IAAJ,CAASqI,KAHF;gBAId1D,KAAK,EAAEhF,GAAG,CAACK,IAAJ,CAAS2E,KAJF;gBAKdkD,eAAe,EAAElI,GAAG,CAACK,IAAJ,CAAS6H,eALZ;gBAMdC,QAAQ,EAAEnI,GAAG,CAACK,IAAJ,CAAS8H,QANL;gBAOdC,MAAM,EAAEpI,GAAG,CAACK,IAAJ,CAAS+H,MAPH;gBAQdC,IAAI,EAAErI,GAAG,CAACK,IAAJ,CAASgI,IARD;gBASdU,WAAW,EAAE/I,GAAG,CAACK,IAAJ,CAAS0I,WATR;gBAUdT,OAAO,EAAEtI,GAAG,CAACK,IAAJ,CAASiI,OAVJ;gBAWdjH,aAAa,EAAErB,GAAG,CAACK,IAAJ,CAASgB,aAXV;gBAYd2H,UAAU,EAAE1C,IAAI,CAACC,GAAL,EAZE;gBAad0C,UAAU,EAAE3C,IAAI,CAACC,GAAL;cAbE,CAAR,CAAV;cAeA7E,GAAG,CAACI,IAAJ,GAAWd,IAAX,CAAgB,UAAAC,IAAI,EAAI;gBACpBhB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;kBAACF,KAAK,EAAE,KAAR;kBAAeK,OAAO,EAAE;gBAAxB,CAArB;cACH,CAFD,WAES,UAAAgB,GAAG,EAAI;gBACZS,mBAAA,CAAQR,GAAR,CAAYD,GAAZ;;gBACAxB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;kBAACrC,KAAK,EAAE,IAAR;kBAAcK,OAAO,EAAE;gBAAvB,CAArB;cACH,CALD;YAMH,CAzCD;;UADgC;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAApByM,oBAAoB;IAAA;EAAA;AAAA,GAA1B;;;;AA8CA,IAAMC,kCAAkC,GAAG,SAArCA,kCAAqC,CAACnN,GAAD,EAAMC,GAAN,EAAc;EAC5DkB,oBAAA,CAAIC,IAAJ,CAAS;IAACC,aAAa,EAAErB,GAAG,CAACsB,MAAJ,CAAWC;EAA3B,CAAT,EAA0C2D,IAA1C,CAA+C,aAA/C,EAA8D1D,IAA9D,CAAmE,UAACC,GAAD,EAAMC,GAAN,EAAc;IAC7E,IAAID,GAAJ,EAAS;MACL,OAAOxB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;QAACrC,KAAK,EAAE,IAAR;QAAcK,OAAO,EAAE;MAAvB,CAArB,CAAP;IACH;;IACD,IAAI,CAACiB,GAAL,EAAU;MACN;MACA,OAAOzB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;QAACrC,KAAK,EAAE,IAAR;QAAcK,OAAO,EAAE;MAAvB,CAArB,CAAP;IACH;;IACD,IAAM2M,aAAa,GAAG1L,GAAG,CAAC+H,MAAJ,CAAW,UAAUC,aAAV,EAAyBC,YAAzB,EAAuC;MACpE,OAAOD,aAAa,GAAGC,YAAY,CAAC3E,KAApC;IACH,CAFqB,EAEnB,CAFmB,CAAtB;IAGA,OAAO/E,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBkC,IAAhB,CAAqB;MAACrC,KAAK,EAAE,KAAR;MAAeK,OAAO,EAAE,SAAxB;MAAmC2M,aAAa,EAAEA;IAAlD,CAArB,CAAP;EAEH,CAbD;AAcH,CAfM,C,CAsBP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}