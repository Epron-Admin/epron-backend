{"version":3,"file":"user.access.js","names":["API_KEY","DOMAIN","mailgun","Mailgun","apiKey","domain","reg_userx","req","res","body","name","email","phoneNumber","password","role","status","send","error","message","user","User","country","countryid","state","stateid","city","cityid","lga","address","hashPassword","created_at","Date","now","updated_at","findOne","exec","err","doc","next","code","save","then","dataRes","async","waterfall","done","crypto","randomBytes","buf","token","toString","verifyToken","verifyTokenExpires","mailTransporter","nodemailer","createTransport","service","auth","pass","mailDetails","from","to","subject","text","sendMail","data","json","console","log","reg_user_fake","fake","Fake","collector","Collection","user_id","_id","result","generate_verify_token_validate_user","verify_user","params","$gt","verified","reg_user2","messages","login_user","promise","blocked","isValid","jwt","sign"],"sources":["../../../src/controllers/access/user.access.js"],"sourcesContent":["\nimport User from '../../models/User.model.js';\nimport Fake from '../../models/FakeUser.model.js';\n// import Collection from '../../models/CollectionCenter.model.js';\nimport jwt from 'jsonwebtoken';\nimport nodemailer from 'nodemailer';\nimport crypto from 'crypto';\nimport async from 'async';\nimport bcrypt from 'bcrypt';\n\nvar API_KEY = 'a2e391c08729f67397de943776f87024-46ac6b00-d975f38b';\n// var DOMAIN = 'sandbox086e0a8d8f2f4b748fb92de88df70842.mailgun.org';\nvar DOMAIN = 'https://blackbox.epron.org.ng'\n// var DOMAIN = 'www.epron.netlify.app.com'\n\nimport Mailgun from 'mailgun-js';\n\nconst mailgun = new Mailgun({apiKey: API_KEY, domain: DOMAIN});\n// const Verifier = require('email-verifier');\n\n\n// Register user\n\n\nexport const reg_userx = (req, res) => {\n    if (\n        (!req.body.name) ||\n        (!req.body.email) ||\n        (!req.body.phoneNumber) ||\n        (!req.body.password) ||\n        (!req.body.role)\n        ) {\n        // console.log(\"All not filled\");\n        return res.status(401).send({error: true, message: \"Name, email, phone, password and role are required\"});\n    } \n    let user = new User({\n        name: req.body.name,\n        email: req.body.email,\n        phoneNumber: req.body.phoneNumber,\n        country: req.body.country,\n        countryid: req.body.countryid,\n        state: req.body.state,\n        stateid: req.body.stateid,\n        city: req.body.city,\n        cityid: req.body.cityid,\n        lga: req.body.lga,\n        address: req.body.address,\n        password: User.hashPassword(req.body.password),\n        // image_url: req.body.image_url,\n        role: req.body.role,\n        created_at: Date.now(),\n        updated_at: Date.now()\n\n    });\n    User.findOne({ email: req.body.email }).exec((err, doc, next) => {\n                \n        // let userEmail = req.body.email;\n        if (err) {\n            return res.status(401).send({error: true, code: 401, message: \"An error occcured\"});\n        }\n        if (doc) {\n            return res.status(401).send({error: true, message: \"Email already exists\"});\n        }\n        user.save()\n        .then((dataRes) => {\n            // res.status(201).json({'user': dataRes, error: false, status: 'success', message: \"Registration successful!\", code: 201 });\n            async.waterfall([\n                (done) => {\n                    crypto.randomBytes(20, (err, buf) => {\n                        let token = buf.toString('hex');\n                        done(err, token);\n                    });\n                },\n                (token, done) => {\n                    // User.findOne({email: req.body.email}).exec\n                    User.findOne({ email: req.body.email }, (err, user) => {\n                        // userEmail = req.body.email;\n                        // console.log('User', user);\n                        if (!user) {\n                            // req.flash('error', 'No account with that email address exists.');\n                            // return next(new Error('No account with that email address exists.'));\n                            return res.send({error: true, message: 'Email address does not exists.'});\n        \n                        }\n                        user.verifyToken = token;\n                        user.verifyTokenExpires = Date.now() + 3600000;\n        \n                        user.save(function (err) {\n                            done(err, token, user);\n                        });\n                        // if (req.body.role === 'collector') {\n                        //     let collector = new Collection({\n                        //         user_id: user._id,\n                                \n                        //     });\n                        //     collector.save().then((result) => {\n                        //         // console.log(\"resilt of center\", result);\n                        //     }).catch(err => {\n                        //         // console.log(\"errrrrrrrrrrrrrrrrrrrrrr\", err);\n                        //         return res.send({error: true, code: 401, message: \"Failed to add new user to center\"});\n                        //     });\n                        // }\n                    });\n                },\n                (token, user, done) => {\n                    let mailTransporter = nodemailer.createTransport({\n                        service: 'gmail',\n                        auth: {\n                            user: 'epronnigeria@gmail.com',\n                            pass: 'xwytgfmmdpdnbajp'\n                        }\n                    });\n                     \n                    let mailDetails = {\n                        from: 'Epron Admin <empron@gmail.com>',\n                        to: req.body.email,\n                        subject: 'Epron Registration',\n                        text: 'You are receiving this because you (or someone else) have requested to signup on Epron ' + ' please click on the following link, or paste this into your browser to complete the process:\\n\\n' + 'https://blackbox.epron.org.ng/verify/' + token + '\\n\\n' +\n                        'If you did not request this, please ignore this email and your registration will be canceled'\n                    };\n                     \n                    mailTransporter.sendMail(mailDetails, function(err, data) {\n                        // console.log(\"Dattttttttttttaaaaaaaa\", data);\n                        if(err) {\n                            // console.log('Error Occurs', err);\n                            return res.send({error: true, code: 401, message: \"Failed to add new unverified user\"});\n                        } else {\n                            // console.log('Email sent successfully');\n                            return res.json({error: false, code: 201, status: 'success', message: 'Token sent to your email'});\n                        }\n                    });\n                }\n            ]).catch(err => {\n            console.log(err);\n            return res.send({err});\n            })\n        })\n        .catch(err => {\n            // console.log(\"errrrrrrrrrrrrrrrrrrrrrr\", err);\n            return res.send({error: true, code: 401, message: \"Failed to add new user\"});\n        });\n        \n    });\n    \n};\n\nexport const reg_user_fake = (req, res) => {\n    if (\n        (!req.body.name) ||\n        (!req.body.email) ||\n        (!req.body.phoneNumber) ||\n        (!req.body.password) ||\n        (!req.body.role)\n        ) {\n        // console.log(\"All not filled\");\n        return res.status(401).send({error: true, message: \"Name, email, phone, password and role are required\"});\n    } \n    let fake = new Fake({\n        name: req.body.name,\n        email: req.body.email,\n        phoneNumber: req.body.phoneNumber,\n        country: req.body.country,\n        countryid: req.body.countryid,\n        state: req.body.state,\n        stateid: req.body.stateid,\n        city: req.body.city,\n        cityid: req.body.cityid,\n        lga: req.body.lga,\n        address: req.body.address,\n        password: User.hashPassword(req.body.password),\n        // image_url: req.body.image_url,\n        role: req.body.role,\n        created_at: Date.now(),\n        updated_at: Date.now()\n\n    });\n    Fake.findOne({ email: req.body.email }).exec((err, doc, next) => {\n                \n        console.log(\"Docu user\", doc)\n        if (err) {\n            return res.status(401).send({error: true, code: 401, message: \"An error occcured\"});\n        }\n        if (doc) {\n            return res.status(401).send({error: true, message: \"Email already exists\"});\n        }\n        fake.save()\n        .then((dataRes) => {\n            // res.status(201).json({'user': dataRes, error: false, status: 'success', message: \"Registration successful!\", code: 201 });\n            async.waterfall([\n                (done) => {\n                    crypto.randomBytes(20, (err, buf) => {\n                        let token = buf.toString('hex');\n                        done(err, token);\n                    });\n                },\n                (token, done) => {\n                    // User.findOne({email: req.body.email}).exec\n                    Fake.findOne({ email: req.body.email }, (err, user) => {\n                        // userEmail = req.body.email;\n                        // console.log('User', user);\n                        if (!fake) {\n                            // req.flash('error', 'No account with that email address exists.');\n                            // return next(new Error('No account with that email address exists.'));\n                            return res.send({error: true, message: 'Email address does not exists.'});\n        \n                        }\n                        fake.verifyToken = token;\n                        fake.verifyTokenExpires = Date.now() + 3600000;\n        \n                        fake.save(function (err) {\n                            done(err, token, fake);\n                        });\n                        if (req.body.role === 'collector') {\n                            let collector = new Collection({\n                                user_id: user._id,\n                                \n                            });\n                            collector.save().then((result) => {\n                                // console.log(\"resilt of center\", result);\n                            }).catch(err => {\n                                // console.log(\"errrrrrrrrrrrrrrrrrrrrrr\", err);\n                                return res.send({error: true, code: 401, message: \"Failed to add new user to center\"});\n                            });\n                        }\n                    });\n                },\n                (token, user, done) => {\n                    let mailTransporter = nodemailer.createTransport({\n                        service: 'gmail',\n                        auth: {\n                            user: 'epronnigeria@gmail.com',\n                            pass: 'xwytgfmmdpdnbajp'\n                        }\n                    });\n                     \n                    let mailDetails = {\n                        from: 'Epron Admin <epronnigeria@gmail.com>',\n                        to: req.body.email,\n                        subject: 'Epron Registration',\n                        text: 'You are receiving this because you (or someone else) have requested to signup on Epron ' + ' please click on the following link, or paste this into your browser to complete the process:\\n\\n' + 'https://blackbox.epron.org.ng/verify/' + token + '\\n\\n' +\n                        'If you did not request this, please ignore this email and your registration will be canceled'\n                    };\n                     \n                    mailTransporter.sendMail(mailDetails, function(err, data) {\n                        // console.log(\"Dattttttttttttaaaaaaaa\", data);\n                        if(err) {\n                            // console.log('Error Occurs', err);\n                            return res.send({error: true, code: 401, message: \"Failed to add new unverified user\"});\n                        } else {\n                            // console.log('Email sent successfully');\n                            return res.json({error: false, code: 201, status: 'success', message: 'Token sent to your email'});\n                        }\n                    });\n                }\n            ]).catch(err => {\n            console.log(err);\n            return res.send({err});\n            })\n        })\n        .catch(err => {\n            // console.log(\"errrrrrrrrrrrrrrrrrrrrrr\", err);\n            return res.send({error: true, code: 401, message: \"Failed to add new user\"});\n        });\n        \n    });\n    \n};\n\n\n// token validation for unverified user that did not get token or has expired\nexport const generate_verify_token_validate_user = (req, res, next) => {\n    // console.log('Email from front', req.body);\n    async.waterfall([\n        (done) => {\n            crypto.randomBytes(20, (err, buf) => {\n                let token = buf.toString('hex');\n                done(err, token);\n            });\n        },\n        (token, done) => {\n            User.findOne({ email: req.body.email }, (err, user) => {\n               let email = req.body.email;\n                // console.log('email', email);\n                if (!user) {\n                    // req.flash('error', 'No account with that email address exists.');\n                    // return next(new Error('No account with that email address exists.'));\n                    return res.send({error: true, message: 'Email address does not exists.'});\n\n                }\n                user.verifyToken = token;\n                user.verifyTokenExpires = Date.now() + 3600000;\n\n                user.save(function (err) {\n                    done(err, token, user);\n                });\n            });\n        },\n        (token, user, done) => {\n            let mailTransporter = nodemailer.createTransport({\n                service: 'gmail',\n                auth: {\n                    user: 'epronnigeria@gmail.com',\n                    pass: 'xwytgfmmdpdnbajp'\n                }\n            });\n             \n            let mailDetails = {\n                from: 'Epron Admin <epronnigeria@gmail.com>',\n                to: req.body.email,\n                subject: 'Epron Registration',\n                text: 'You are receiving this because you (or someone else) have requested to signup on Epron ' + ' please click on the following link, or paste this into your browser to complete the process:\\n\\n' + 'https://blackbox.epron.org.ng/verify/' + token + '\\n\\n' +\n                'If you did not request this, please ignore this email and your registration will be canceled'\n            };\n             \n            mailTransporter.sendMail(mailDetails, function(err, data) {\n                // console.log(\"Dattttttttttttaaaaaaaa\", data);\n                if(err) {\n                    // console.log('Error Occurs', err);\n                    return res.send({error: true, code: 401, message: \"Failed to add new user unverified user\"});\n                } else {\n                    // console.log('Email sent successfully');\n                    return res.json({error: false, code: 201, status: 'success', message: 'Token sent to your email'});\n                }\n            });\n        }\n    ]).catch(err => {\n         console.log(err);\n         res.send({err});\n     })\n    \n}\n\n// token validation for unverified user that did not get token or has expired\n\n\n// Verify user by token\nexport const verify_user = (req, res, next) => {\n    console.log(\"Request params\", req);\n    async.waterfall([\n        (done) => {\n           User.findOne({ verifyToken: req.params.token, verifyTokenExpires: { $gt: Date.now() } }, (err, user) => {\n             if (!user) {\n                   // console.log('password from front: ', req.body);\n                   // return next(new Error('Password reset token is invalid or has expired.'));\n                   return res.send({message: 'Password reset token has expired, or user not found.'});\n                   // req.flash('success', 'Password reset token is invalid or has expired.');\n                   // return res.redirct('back');\n               }\n            else {\n                user.verified = true;\n                user.save().then(result => {\n                    res.json({ 'user': result });\n                    //res.status(200).send({mssage: 'update successful'});\n                }).catch(err => {\n                    console.log(err.code);\n                    res.send({ error: true, message: 'failed to verify data' });\n                });\n                return res.json({error: false, code: 201, status: 'success', message: 'User Verified'});\n            }\n               \n           });\n       }\n       \n    ]).catch(err => {\n        console.log(err);\n        res.send({err});\n    })\n}\n// Verify user by token\n\n\n\n// Register user\n    export const reg_user2 = (req, res, next) => {\n        console.log('clicked function', req.body);\n        if (\n            (!req.body.name) ||\n            (!req.body.email) ||\n            (!req.body.phoneNumber) ||\n            (!req.body.password) ||\n            (!req.body.role)\n            ) {\n            // console.log(\"All not filled\");\n            return res.status(401).send({error: true, message: \"Name, email, phone, password and role are required\"});\n        } \n        let user = new User({\n            name: req.body.name,\n            email: req.body.email,\n            phoneNumber: req.body.phoneNumber,\n            password: User.hashPassword(req.body.password),\n            // image_url: req.body.image_url,\n            role: req.body.role,\n            created_at: Date.now(),\n            updated_at: Date.now()\n\n        });\n        User.findOne({ email: req.body.email }).exec((err, doc, next) => {\n                    \n            // let userEmail = req.body.email;\n            console.log('error caused', err);\n            if (err) {\n                return res.status(401).send({error: true, code: 401, message: \"An error occcured\"});\n            }\n            if (doc) {\n                return res.status(401).send({error: true, message: \"Email already exists\"});\n            }\n            user.save()\n            .then((dataRes) => {\n                console.log(\"dataaaaaa\", dataRes);\n                // res.status(201).json({'user': dataRes, error: false, status: 'success', message: \"Registration successful!\", code: 201 });\n                async.waterfall([\n                    (done) => {\n                        crypto.randomBytes(20, (err, buf) => {\n                            let token = buf.toString('hex');\n                            done(err, token);\n                        });\n                    },\n                    (token, done) => {\n                        // User.findOne({email: req.body.email}).exec\n                        User.findOne({ email: req.body.email }, (err, user) => {\n                            // userEmail = req.body.email;\n                            // console.log('email', userEmail);\n                            if (!user) {\n                                // req.flash('error', 'No account with that email address exists.');\n                                // return next(new Error('No account with that email address exists.'));\n                                return res.send({error: true, message: 'Email address does not exists.'});\n            \n                            }\n                            user.verifyToken = token;\n                            user.verifyTokenExpires = Date.now() + 3600000;\n            \n                            user.save(function (err) {\n                                done(err, token, user);\n                            });\n                        });\n                    },\n                    (token, user, done) => {\n                        const data = {\n                        from: 'Epron Admin <epronnigeria@gmail.com>',\n                        to: req.body.email,\n                        subject: 'Registration validation',\n                        text: 'You are receiving this because you (or someone else) have requested to signup on Epron ' + ' please click on the following link, or paste this into your browser to complete the process:\\n\\n' + 'https://blackbox.epron.org.ng/users/verify-user/' + token + '\\n\\n' +\n                                'If you did not request this, please ignore this email and your registration will be canceled'\n                        };\n                \n                        mailgun.messages().send(data, (error, body) => {\n                            if (error) {\n                                console.log(error);\n                                return res.send({error});\n                            }\n                        //   console.log('Mailgun body', body);\n                        //   console.log('Mailgun dataaaaa', data);\n                            res.json({error: false, code: 201, status: 'success', message: 'Token sent to your email'});\n                        //   res.status(201).json({'user': dataRes, error: false, status: 'success', message: \"Registration successful!\", code: 201 });\n\n                        });\n                    }\n                ]).catch(err => {\n                console.log(err);\n                return res.send({err});\n                })\n            })\n            .catch(err => {\n                console.log(\"errrrrrrrrrrrrrrrrrrrrrr\", err);\n                return res.send({error: true, code: 401, message: \"Failed to add new user\"});\n            });\n        });\n    };\n // Registration ends \n\n\n\n   // login for user\n   export const login_user = (req, res) => {\n        let promise = User.findOne({ email: req.body.email, blocked: false}).exec();\n        promise.then(function (doc) {\n            if (doc) {\n                if (doc.verified === false) {\n                    return res.json({ error: true, message: 'you are not verified', code: 403 });\n                }\n                if (doc.blocked === true) {\n                    return res.json({ error: true, message: 'you have been disabled', code: 405 });\n                }\n                if (doc.isValid(req.body.password)) {\n                    // const token = jwt.sign({ email: doc.get('email'), _id: doc._id }, 'secret');\n                    const token = jwt.sign({ email: doc.email, _id: doc._id}, 'secret');\n                    return res.json({ token: token, error: false, user: doc, message: 'login successful', code: 201 });\n                    // return res.status(201).json({ error: false, message: 'Successful' });\n                } else {\n                    return res.send({ error: true, message: 'Invalid credentials' });\n                    \n                }\n            } else {\n                return res.send({ error: true, message: 'User not found' });\n            }\n\n        })\n        // promise.catch(function(err)) {\n        //         return res.status(501).json({message: 'Some internal server error'});\n        // }\n        .catch(err => {\n            res.send({error: true, message: 'Some internal error' });\n        });\n    }\n\n"],"mappings":"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"}