{"version":3,"file":"collection.controllers.js","names":["fetch_collection_centers_by_userid","req","res","User","findById","_id","params","id","sort","exec","err","centers","status","send","error","message","collection_centers","log_single_ewaste","body","category_id","sub_category_id","quantity","weight","unit","user_id","role","user","console","log","ton_weight","Types","type","json","total","price","pin","Math","random","toString","slice","ewaste","Ewaste","round","unit_weight","ewaste_pin","created_at","Date","now","updated_at","save","then","data","excel_bulk_ewaste","equipment_pin","fetch_ewaste_by_user","page","parseInt","query","limit","startIndex","endIndex","results","countDocuments","total_ewaste_logged","pickedup","total_ewaste_pickedup","next","previous","find","populate","skip","waste","waste_weight","reduce","previousValue","currentValue","total_logged_ewaste","total_weight_logged","pagination","update_logged_ewaste","result","remove_log_ewaste","findByIdAndRemove","accept_request_pickup","RequestPickup","accept_request","pickup","accepted_by","update_ewaste_to_ready_pickup","ready_pickup","code","mark_pickup_as_completed","completed"],"sources":["../../../src/controllers/collectioncenter/collection.controllers.js"],"sourcesContent":["\n// import Collection from '../../models/CollectionCenter.model.js';\nimport User from '../../models/User.model.js'\nimport Ewaste from '../../models/Ewaste.model.js';\nimport Types from '../../models/CategoryTypes.model.js';\nimport RequestPickup from '../../models/RequestPickup.model.js';\nimport console from 'console';\n\n \n// export const new_collection_ceneter = (req, res) => {\n//     if ((!req.body.name) ||\n//        (!req.body.address) ||\n//        (!req.body.user_id) ||\n//        (!req.body.lga) ||\n//        (!req.body.lat) ||\n//        (!req.body.long)\n//     ) \n//     {\n//         // console.log(\"All not filled\");\n//         return res.status(401).send({error: true, message: \"Name, address, lga, lat, long, user_id are required\"});\n//     } \n//     let collection = new Collection({\n//         name: req.body.name,\n//         address: req.body.address,\n//         user_id: req.body.user_id,\n//         lga: req.body.lga,\n//         lat: req.body.lat,\n//         long: req.body.long,\n//         created_at: Date.now(),\n//         updated_at: Date.now()\n\n//     });\n//     collection.save().then(result => {\n//         res.json({error: false, code: 201, status: 'success', message: 'collection center added successfully', 'collection_centers': result });\n//     }).catch(err => {\n//         // console.log(err);\n//         res.send({ error: true, message: 'failed to add data' });\n//     });\n// }\n\n// export const fetch_all_collection_centers = (req, res) => {\n//     Collection.find({}).populate('user_id').sort('-created_at').exec((err, collection) => {\n//         if (err) {\n//             console.log(err);\n//             return res.send({error: true, code: 401, message: \"Failed to fecth your collecton centers\"});\n//             // return res.send(err);\n//         }\n//         return res.json({error: false, code: 201, status: 'success', message: 'fetch all categories', centers: collection });\n//         // res.send(category);\n//     });\n// }\n\nexport const fetch_collection_centers_by_userid = (req, res) => {\n    User.findById({_id: req.params.id}).sort('-created_at').exec((err, centers) => {\n        if (err) {\n            // console.log(err);\n            return res.status(401).send({error: true, message: \"error occured\"});\n        }\n        if (!centers) {\n            // console.log(err);\n            return res.status(404).send({error: true, message: \"collection centers not found\"});\n        }\n        return res.status(201).send({error: false, message: \"success\", collection_centers: centers});\n\n    });\n}\n\n// export const remove_collection_center = (req, res) => {\n//     Collection.findByIdAndRemove({ _id: req.params.id }, (err, center) => {\n//         if (err) {\n//             return res.json({error: true, status: 401, message: \"failed to delete collection center\"});\n//         }\n//         else {\n//             return res.json({error: false, status: 201, message: \"success!\" });\n//         }\n//     });\n// }\n\n// export const update_center = (req, res) => {\n//     let ton_weight = '';\n//     if ((!req.body.name) ||\n//         (!req.body.address) ||\n//         // (!req.body.user_id) ||\n//         (!req.body.lga) ||\n//         (!req.body.lat) ||\n//         (!req.body.long)\n//     ) \n//     {\n//      // console.log(\"All not filled\");\n//      return res.status(401).send({error: true, message: \"Name, address, lga, lat and long are required\"});\n//     }\n//     Collection.findById({_id: req.params.id}, (err, center) => {\n//         if (err) {\n//             res.send({code: 505, error: true, err: err, message: 'error occured' });\n//             console.log(err);\n//         }\n//         if (!center)\n//             res.send({code: 404, error: true, message: 'Can not find collection center' });\n//             // return next(new Error('Could not load document'));\n//         else {\n//             // console.log('The user', user);\n//             // console.log('the body', req.body);\n\n//             center.name = req.body.name,\n//             center.address = req.body.address,\n//             // center.user_id = req.body.user_id,\n//             center.lga = req.body.lga,\n//             center.lat = req.body.lat,\n//             center.long = req.body.long,\n//             center.updated_at = Date.now()\n\n\n//             center.save().then(result => {\n//                 res.json({ error: false, code: 200, status: 'success', 'collection center  ': result });\n//                 //res.status(200).send({mssage: 'update successful'});\n//             }).catch(err => {\n//                 console.log(err.code);\n//                 res.send({ error: true, message: 'failed to update collection' });\n//             });\n//         }\n//     });\n// }\n\nexport const log_single_ewaste = async (req, res) => {\n    if (\n        (!req.body.category_id) ||\n        // (!req.body.category_name) ||\n        // (!req.body.price) ||\n        (!req.body.sub_category_id) ||\n        // (!req.body.sub_category_name) ||\n        (!req.body.quantity) ||\n        (!req.body.weight) ||\n        (!req.body.unit) ||\n        (!req.body.user_id)\n        ) {\n        return res.status(401).send({error: true, message: \"Category_id, unit, type, quantity, weight and user_id are required\"});\n    } \n\n    User.findById({_id: req.body.user_id, role: 'collector'}).exec((err, user) => {\n        if (err) {\n            console.log(err);\n            return res.send(err);\n        }\n\n        if (user.role != 'collector') {\n            return res.status(401).send({error: true, message: \"This user can not log e-waste\"});\n        }\n        else {\n            let ton_weight;\n         Types.findById({ _id: req.body.sub_category_id }).exec((err, type) => {\n            if (err) {\n                console.log(err);\n                return res.json({error: true, status: 401, message: \"Failed fetch types\"})\n            }\n            if (!type) {\n                return res.json({error: true, status: 404, message: \"Sub category not found\" });\n            }\n            \n            // note the weight is measured in tonage or ton, after the aggregation from the unit.\n            if (req.body.unit === 'kg') {\n                ton_weight = 0.00110231 * req.body.weight;\n            }\n            if (req.body.unit === 'g') {\n            ton_weight = 0.0000011023 * req.body.weight;\n            }\n            // const ton_weight = req.body.unit * req.body.weight;\n            // const total = type.price *  req.body.quantity * ton_weight;\n            const total = type.price * ton_weight;\n            const pin = Math.random().toString(36).slice(2);\n            let ewaste = new Ewaste({\n                category_id: req.body.category_id,\n                // category_name: req.body.category_name,\n                // unit_price: type.price,\n                price: type.price,\n                total: Math.round(total),\n                sub_category_id: req.body.sub_category_id,\n                // sub_category_name: req.body.sub_category_name,\n                quantity: req.body.quantity,\n                weight: ton_weight,\n                unit: req.body.unit,\n                unit_weight: req.body.weight,\n                user_id: req.body.user_id,\n                ewaste_pin: pin,\n                created_at: Date.now(),\n                updated_at: Date.now()\n        \n            });\n            ewaste.save()\n            .then(data => {\n                res.status(201).json({ewaste: data, error: false, message: \"e-Waste saved successful!\" });\n            })\n            .catch(err => {\n                console.log(err);\n                res.status(401).send({error: true, message: \"Failed to save e-Waste\"});\n            });\n        });\n        }\n    });\n}\n\nexport const excel_bulk_ewaste = async (req, res) => {\n    User.findById({ _id: req.body.user_id, role: 'collector' }).exec((err, user) => {\n        if (\n            (!req.body.category_id) ||\n            (!req.body.total) ||\n            (!req.body.price) ||\n            (!req.body.sub_category_id) ||\n            (!req.body.unit_weight) ||\n            (!req.body.quantity) ||\n            (!req.body.weight) ||\n            (!req.body.unit) ||\n            (!req.body.user_id)\n            ) {\n            return res.status(401).send({error: true, message: \"Category_id, price, sub_category_id, unit_weight, unit, total, quantity, weight and user_id are required\"});\n        } \n        if (err) {\n            return res.json({error: true, status: 401, message: \"error occured for this user\"});\n        }\n        if (!user) {\n            return res.json({error: true, status: 401, message: \"user not found\"});\n        }\n        let ewaste = new Ewaste({\n            category_id: req.body.category_id,\n            price: req.body.price,\n            total: req.body.total,\n            sub_category_id: req.body.sub_category_id,\n            quantity: req.body.quantity,\n            weight: req.body.weight,\n            unit: req.body.unit,\n            unit_weight: req.body.unit_weight,\n            user_id: req.body.user_id,\n            equipment_pin: req.body.equipment_pin,\n            created_at: Date.now(),\n            updated_at: Date.now()\n        }); \n        ewaste.save().then(data => {\n            res.status(201).json({error: false, message: \"bulk e-waste saved successful!\" });\n        }).catch(err => {\n            console.log(err);\n            res.status(401).send({error: true, message: \"Failed to save bulk e-waste\"});\n        });\n    });\n};\n\n\nexport const fetch_ewaste_by_user = async (req, res) => {\n    const page = parseInt(req.query.page);\n    const limit = parseInt(req.query.limit);\n    const startIndex = (page - 1) * limit;\n    const endIndex = page * limit;\n    const results = {};\n  \n    const total_ewaste_logged = await Ewaste.countDocuments({user_id: req.params.id}).exec();\n    const total_ewaste_pickedup = await Ewaste.countDocuments({user_id: req.params.id, pickedup: true}).exec();\n\n\n    if (endIndex <  await Ewaste.countDocuments({user_id: req.params.id}).exec()) {\n        results.next = {\n            page: page + 1,\n            limit: limit\n        }\n    }\n\n    if (startIndex > 0) {\n        results.previous = {\n            page: page - 1,\n            limit: limit\n        }\n    }\n    Ewaste.find({user_id: req.params.id}).populate('category_id').populate('sub_category_id').populate('user_id').sort('-created_at').limit(limit).skip(startIndex).exec((err, waste) => {\n        // console.log(\"ewasteeeeeeeeeeeeeeeee\", waste)\n        if (err) {\n            console.log(err);\n            return res.json({error: true, status: 401, message: \"Failed to fetch user logged ewaste\"})\n        }\n        const waste_weight = waste.reduce(function (previousValue, currentValue) {\n            return previousValue + currentValue.weight;\n        }, 0);\n        return res.json({error: false, status: 201, total_ewaste_pickedup: total_ewaste_pickedup, total_logged_ewaste: total_ewaste_logged, total_weight_logged: waste_weight, pagination: results, ewaste: waste, message: \"Fetch all logged ewaste successful!\" });\n    });\n}\n\n\nexport const update_logged_ewaste = async (req, res) => {\n    if (\n        (!req.body.category_id) ||\n        // (!req.body.category_name) ||\n        (!req.body.price) ||\n        (!req.body.unit) ||\n        (!req.body.sub_category_id) ||\n        // (!req.body.sub_category_name) ||\n        (!req.body.quantity) ||\n        (!req.body.weight)\n        // (!req.body.user_id)\n        ) {\n        return res.status(401).send({error: true, message: \"Category_id, price, unit, type, quantity, weight and are required\"});\n    }\n    Ewaste.findById(req.params.id, (err, ewaste) => {\n        if (err) {\n            console.log(err);\n        }\n        // if (log.paid === true) {\n        // return res.status(401).send({error: true, message: \"you can not update this log\"});\n        // }\n        if (ewaste.pickedup === true) {\n            // return next(new Error('Could not find logged eqiupment'));\n            return res.status(404).send({error: true, message: \"You can not update this ewaste, it has been picked up\"});\n        }\n        if (!ewaste) {\n            // return next(new Error('Could not find logged eqiupment'));\n            return res.status(404).send({error: true, message: \"Could not find logged ewaste\"});\n        }   \n        else {\n\n            Types.findById({ _id: req.body.sub_category_id }).exec((err, type) => {\n                if (err) {\n                    console.log(err);\n                    return res.json({error: true, status: 401, message: \"Failed fetch types\"})\n                }\n                if (req.body.price != type.price) {\n                    return res.json({error: true, status: 401, message: \"The type price does not match\" });\n                }\n                // res.json({error: false, status: 201, requests: type, message: \"fetch all types successful!\" });\n                const total = type.price *  req.body.quantity * req.body.weight;\n            // });\n\n            ewaste.category_id = req.body.category_id,\n            // ewaste.category_name = req.body.category_name,\n            ewaste.price = type.price,\n            ewaste.total = total,\n            ewaste.unit = unit,\n            ewaste.sub_category_id = req.body.sub_category_id,\n            // ewaste.sub_category_name = req.body.sub_category_name,\n            ewaste.quantity = req.body.quantity,\n            ewaste.weight = req.body.weight,\n            // log.user_id = req.body.user_id,\n            // log.equipment_pin = pin,\n            ewaste.updated_at = Date.now()\n            // user.body.user = req.body;\n            ewaste.save().then(result => {\n                res.status(201).json({log: result, error: false, message: \"Ewaste update successful\" });\n                // res.json({ 'log': result });\n                //res.status(200).send({mssage: 'update successful'});\n            }).catch(err => {\n                console.log(err);\n                res.send({ error: true, message: 'failed to update ewaste' });\n            });\n        });\n        }\n        \n    });\n}\n\nexport const remove_log_ewaste = (req, res) => {\n    Ewaste.findByIdAndRemove({ _id: req.params.id }).exec((err, ewaste) => {\n        if (err) {\n            return res.json({error: true, status: 401, message: \"failed to delete waste\"});\n            // res.json(err);\n        }\n        if (ewaste.pickedup === true) {\n            return res.status(404).send({error: true, message: \"you can not delete this e-waste, it has been picked up\"});\n        }\n        if (!ewaste) {\n            return res.status(404).send({error: true, message: \"e-waste not found\"});\n        }\n        return res.status(401).send({error: true, message: \"e-waste has been deleted succuesfuly\"});\n    });\n}\n\nexport const accept_request_pickup = async (req, res) => {\n    RequestPickup.findById({_id: req.body.id, accept_request: false}).exec((err, pickup) => {\n        if (err) {\n            // console.log(\"errrrrrrrrrrrr\", err);\n            return res.json({error: true, status: 401, message: \"Error oocured\"});\n        }\n        if (!pickup) {\n            return res.status(404).send({error: true, message: \"pickup request not found\"});\n        } else {\n            if ( pickup.accept_request === false) {\n                pickup.accept_request = true;\n                pickup.accepted_by = req.body.user_id;\n                pickup.save().then((result) => {\n                    return res.status(200).send({error: false, message: \"Pickup has been accepted by you succuesfuly\"});\n                }).catch(err => {\n                    // console.log(err.code);\n                    res.send({ error: true, message: 'failed to accept pickup' });\n                });\n            } else {\n                return res.json({error: true, status: 401, message: \"Pickup has already been picked\"});\n            }\n            \n        }\n    });\n}\n\nexport const update_ewaste_to_ready_pickup = (req, res) => {\n    Ewaste.findById({_id: req.body.id, user_id: req.body.user_id}).exec((err, waste) => {\n        if (err) {\n            // console.log(\"errrrrrrrrrrrr\", err);\n            return res.json({error: true, status: 401, message: \"Error oocured\"});\n        }\n        if (waste.user_id != req.body.user_id) {\n            return res.status(404).send({error: true, message: \"collection center not found\"});\n        } \n        if (!waste) {\n            return res.status(404).send({error: true, message: \"pickup request not found\"});\n        } \n        else {\n            if ( waste.ready_pickup === false) {\n                waste.ready_pickup = true;\n                waste.save().then((result) => {\n                    return res.status(200).send({error: false, code: 200, message: 'success', message: \"e-waste ready for pick up\"});\n                }).catch(err => {\n                    // console.log(err.code);\n                    res.send({ error: true, message: 'failed to update e-waste' });\n                });\n            } else {\n                return res.json({error: true, status: 401, message: \"e-waste already set for pick up\"});\n            }\n            \n        }\n    });\n}\n\nexport const mark_pickup_as_completed = async (req, res) => {\n    RequestPickup.findById({_id: req.body.id}).exec((err, pickup) => {\n        if (err) {\n            // console.log(\"errrrrrrrrrrrr\", err);\n            return res.json({error: true, status: 401, message: \"Error oocured\"});\n        }\n        if (!pickup) {\n            return res.status(404).send({error: true, message: \"pickup request not found\"});\n        } \n        if (pickup.accepted_by === req.body.user_id) {\n            return res.status(401).send({error: true, message: \"you did not accept this pickup\"});\n        }\n        if (pickup.completed === true) {\n            return res.status(401).send({error: true, message: \"pickup already marked as completed\"});\n        } \n        \n        else {\n            // && pickup.completed != true\n            if ( pickup.accept_request === true) {\n                pickup.completed = true;\n                pickup.save().then((result) => {\n                    return res.status(200).send({error: false, message: \"Pickup has been completed by you succuesfuly\"});\n                }).catch(err => {\n                    // console.log(err.code);\n                    res.send({ error: true, message: 'failed to mark as completed' });\n                });\n            } else {\n                return res.json({error: true, status: 401, message: \"Pickup has not been accepted by you\"});\n            }\n            \n        }\n    });\n}\n\n// export const new_sub_cateory = (req, res) => {\n//     console.log(\"reqquests\", req.body);\n//     if ((!req.body.name) || (!req.body.category_id) || (!req.body.price)) {\n//         // console.log(\"All not filled\");\n//         return res.status(401).send({error: true, message: \"Name and category id are required\"});\n//     } \n//     let types = new Types({\n//         name: req.body.name,\n//         price: req.body.price,\n//         category_id: req.body.category_id,\n//         created_at: Date.now(),\n//         updated_at: Date.now()\n\n//     });\n//     Types.findOne({ name: req.body.name }).exec((err, doc, next) => {\n//         if (err) {\n//             return res.status(401).send({error: true, code: 401, message: \"An error occcured\"});\n//         }\n//         if (doc) {\n//             return res.send({error: true, message: 'type category name already exists.'});\n//         }\n//         let id = types.category_id;\n//         types.save().then(result => {\n//             console.log(\"Type reusult:\", result);\n//             Category.findById(id).then((docs) => {\n//                 if(!docs) {\n//                     return res.status(404).send();\n//                 }\n//                 docs.types.push(result);\n//                 docs.save();\n//                 return res.json({error: false, code: 201, status: 'success', message: 'type category created successfuly', type: result });\n\n//             }).catch((e) => {\n//                 return res.send(e).status(404);\n//             })\n//             // return res.json({error: false, code: 201, status: 'success', message: 'sub category created successfuly', type: result });\n//             // res.status(200).send({mssage: 'Category created successful'});\n//         }).catch(err => {\n//             console.log(err);\n//             return res.send({ error: true, message: 'failed to add data' });\n//         });\n//     })\n// }\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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"}